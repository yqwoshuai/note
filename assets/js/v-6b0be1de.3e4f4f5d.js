(self.webpackChunknote=self.webpackChunknote||[]).push([[300],{4418:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>p});const p={key:"v-6b0be1de",path:"/js-develop/20.html",title:"第二十章、JSON",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"语法",slug:"语法",children:[{level:3,title:"简单值",slug:"简单值",children:[]},{level:3,title:"对象和数组",slug:"对象和数组",children:[]}]},{level:2,title:"解析与序列化",slug:"解析与序列化",children:[{level:3,title:"序列化",slug:"序列化",children:[]},{level:3,title:"解析",slug:"解析",children:[]}]}],filePathRelative:"js-develop/20.md"}},781:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>t});const p=(0,a(6252).uE)('<h1 id="第二十章、json" tabindex="-1"><a class="header-anchor" href="#第二十章、json" aria-hidden="true">#</a> 第二十章、JSON</h1><h2 id="语法" tabindex="-1"><a class="header-anchor" href="#语法" aria-hidden="true">#</a> 语法</h2><p>JSON的语法可以表示以下三种类型的值。<br> 简单值：与JavaScript相同，可以表示字符串，数值，布尔值和null，但不支持特殊值undefined。<br> 对象：无需键值对。<br> 数组：有序值的列表。<br> JSON不支持变量，函数或对象实例，仅是一种表示结构化数据的格式。</p><h3 id="简单值" tabindex="-1"><a class="header-anchor" href="#简单值" aria-hidden="true">#</a> 简单值</h3><p>JSON表示字符串时必须用双引号，单引号会导致语法错误。其他简单值表示与JavaScript相同。</p><h3 id="对象和数组" tabindex="-1"><a class="header-anchor" href="#对象和数组" aria-hidden="true">#</a> 对象和数组</h3><p>JSON中对象的属性名称要加双引号。JSON对象没有声明变量，没有末尾分号，同一个对象不能出现两个同名属性。JSON数组的语法与JavaScript相同，但同样也没有变量和分号。</p><h2 id="解析与序列化" tabindex="-1"><a class="header-anchor" href="#解析与序列化" aria-hidden="true">#</a> 解析与序列化</h2><h3 id="序列化" tabindex="-1"><a class="header-anchor" href="#序列化" aria-hidden="true">#</a> 序列化</h3><p>JSON对象的stringify()方法用于将JavaScript对象序列化为JSON字符串。默认情况下，输出的JSON字符串不包含任何空格字符或缩进。所有函数及原型都会被有意忽略，值为undefined的任何属性也都会被跳过。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n    x<span class="token operator">:</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span>\n\ty<span class="token operator">:</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span>\n\tz<span class="token operator">:</span><span class="token punctuation">{</span>\n        z1<span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n\t\tz2<span class="token operator">:</span><span class="token string">&quot;z2&quot;</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n\tu<span class="token operator">:</span><span class="token keyword">undefined</span><span class="token punctuation">,</span>\n\t<span class="token function-variable function">f</span><span class="token operator">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// {&quot;x&quot;:&quot;a&quot;,&quot;y&quot;:&quot;b&quot;,&quot;z&quot;:{&quot;z1&quot;:[1,2,3],&quot;z2&quot;:&quot;z2&quot;}}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>JSON.stringify()方法第二个参数可以是一个数组或方法，为数组时，序列化的结果将只包含数组中列出的属性。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">&quot;x&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;y&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// {&quot;x&quot;:&quot;a&quot;,&quot;y&quot;:&quot;b&quot;}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>第二个参数为方法时，接收两个参数，一个是属性名，一个是属性值，可以在方法中对属性进行操作，根据函数的返回值改变序列化的结果。返回值为undefined的项会被忽略。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token keyword">return</span> value<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>JSON.stringify()方法第三个参数是用于控制缩进和空白符，如果这个参数是一个数值，则表示每个级别缩进的空格数。缩进值最大为10。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">/*\n{\n    &quot;x&quot;: &quot;a&quot;,\n    &quot;y&quot;: &quot;b&quot;,\n    &quot;z&quot;: {\n        &quot;z1&quot;: [\n            1,\n            2,\n            3\n        ],\n        &quot;z2&quot;: &quot;z2&quot;\n    }\n}\n*/</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>当缩进参数为一个字符串时，将用这个字符串来当做缩进符。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token string">&quot;----&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">/*\n{\n----&quot;x&quot;: &quot;a&quot;,\n----&quot;y&quot;: &quot;b&quot;,\n----&quot;z&quot;: {\n--------&quot;z1&quot;: [\n------------1,\n------------2,\n------------3\n--------],\n--------&quot;z2&quot;: &quot;z2&quot;\n----}\n}\n*/</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>当对象上有toJSON()方法时，在序列化的时候会执行toJSON()方法来返回序列化结果。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n    x<span class="token operator">:</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span>\n\ty<span class="token operator">:</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span>\n\tz<span class="token operator">:</span><span class="token punctuation">{</span>\n        z1<span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n\t\tz2<span class="token operator">:</span><span class="token string">&quot;z2&quot;</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n\tu<span class="token operator">:</span><span class="token keyword">undefined</span><span class="token punctuation">,</span>\n\t<span class="token function-variable function">f</span><span class="token operator">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">toJSON</span><span class="token operator">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 0</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h3 id="解析" tabindex="-1"><a class="header-anchor" href="#解析" aria-hidden="true">#</a> 解析</h3><p>JSON.parse()方法用于将JSON字符串解析为JavaScript对象。同样接收一个用于操作解析的方法作为参数。与序列化方法的第二个参数相同，这个解析方法接收两个参数一个是属性名，一个是属性值，可以在方法内对每一项进行操作，根据返回值改变解析的结果。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n    x<span class="token operator">:</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span>\n\ty<span class="token operator">:</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span>\n\tz<span class="token operator">:</span><span class="token punctuation">{</span>\n        z1<span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n\t\tz2<span class="token operator">:</span><span class="token string">&quot;z2&quot;</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n\tu<span class="token operator">:</span><span class="token keyword">undefined</span><span class="token punctuation">,</span>\n\t<span class="token function-variable function">f</span><span class="token operator">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> jsonObj <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>jsonObj<span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>key<span class="token operator">===</span><span class="token string">&quot;x&quot;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        value <span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> value<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// {x: &quot;a1&quot;, y: &quot;b&quot;, z: {…}}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div>',24),t={render:function(n,s){return p}}}}]);