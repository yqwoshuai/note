(self.webpackChunknote=self.webpackChunknote||[]).push([[795],{9198:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>p});const p={key:"v-c0b3749a",path:"/js-njia/6.html",title:"第六章、驯服线程和定时器",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"定时器和线程是如何工作的",slug:"定时器和线程是如何工作的",children:[]},{level:2,title:"处理昂贵的计算过程",slug:"处理昂贵的计算过程",children:[]},{level:2,title:"中央定时器控制",slug:"中央定时器控制",children:[]}],filePathRelative:"js-njia/6.md"}},1098:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>t});const p=(0,a(6252).uE)('<h1 id="第六章、驯服线程和定时器" tabindex="-1"><a class="header-anchor" href="#第六章、驯服线程和定时器" aria-hidden="true">#</a> 第六章、驯服线程和定时器</h1><h2 id="定时器和线程是如何工作的" tabindex="-1"><a class="header-anchor" href="#定时器和线程是如何工作的" aria-hidden="true">#</a> 定时器和线程是如何工作的</h2><p>JavaScript提供了两种方式，用于创建定时器以及两个相应的清除方法。这些方法都是window对象上的。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 在一段时间（delay）之后执行传入的fn方法，并返回该定时器的唯一标识</span>\n<span class="token keyword">var</span> id <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span>delay<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 在定时器还未触发时，取消定时器</span>\n<span class="token function">clearTimeout</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>\n\n<span class="token comment">// 在每间隔一段时间（delay）之后都执行传入的fn方法，并返回该定时器的唯一标识</span>\n<span class="token keyword">var</span> id <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span>delay<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 取消间隔定时器</span>\n<span class="token keyword">var</span> id <span class="token operator">=</span> <span class="token function">clearInterval</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>由于JavaScript是单线程的，在特定的时间点只能运行一个执行代码，而且也无法确定定时器处理程序到底是在什么时候执行，当一个异步事件发生时（鼠标单击，定时器触发，或者是ajax返回函数），它会进行排队，在线程空闲时才进行执行，并且每个浏览器的排队机制是不同的，浏览器不会对来自同一个setInterval()的多个回调进行排队，同一时刻，将只会有一个来自同一setInterval()的回调在队列中。 interval间隔定时器并不是周期执行的timeout定时器，通过下面代码可以看出差异。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token comment">/*主内容代码*/</span>\n\t<span class="token function">setTimeout</span><span class="token punctuation">(</span>repeat<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">/*主内容代码*/</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>在setTimeout()代码中，要在前一个主题内容代码执行结束并延迟10ms的时间后，才能再次执行setTimeout()。 而setInterval()代码中，每间隔10ms就尝试执行主内容代码，并不会关注上一次setInterval()中的主内容代码是如何执行的。 浏览器无法保证我们指定的延迟间隔，尤其是在间隔时间非常小的情况下，因为执行回调函数和代码本身也要花费时间。</p><h2 id="处理昂贵的计算过程" tabindex="-1"><a class="header-anchor" href="#处理昂贵的计算过程" aria-hidden="true">#</a> 处理昂贵的计算过程</h2><p>下面代码会创建240000个DOM节点，并使用大量单元格来填充一个表格。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> tbody <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&quot;tbody&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">20000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">var</span> tr <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;tr&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">6</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">var</span> td <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;td&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        td<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">&quot;,&quot;</span><span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        tr<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>td<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    tbody<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>tr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>执行类似上述计算昂贵的代码，浏览器往往会卡顿很长时间，将这些操作分隔，定期让代码中断，并记录中断的地方，间隔一定时间再调度下一阶段。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> row <span class="token operator">=</span> <span class="token number">20000</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> divede <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token comment">// 分隔的数量</span>\n<span class="token keyword">var</span> cur <span class="token operator">=</span> row <span class="token operator">/</span> divede<span class="token punctuation">;</span>  <span class="token comment">// 每次执行的次数</span>\n<span class="token keyword">var</span> now <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// 执行的阶段</span>\n<span class="token keyword">var</span> tbody <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&quot;tbody&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">goNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> go <span class="token operator">=</span> cur <span class="token operator">*</span> now<span class="token punctuation">;</span>  <span class="token comment">// 记录上次中断结束的地方</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>cur<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">var</span> tr <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;tr&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">6</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">var</span> td <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;td&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            td<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">+</span>go<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;,&quot;</span><span class="token operator">+</span>j<span class="token operator">+</span><span class="token string">&quot;,&quot;</span><span class="token operator">+</span>now<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            tr<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>td<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        tbody<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>tr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    now<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 调度下一阶段</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>now<span class="token operator">&lt;</span>divede<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token function">setTimeout</span><span class="token punctuation">(</span>goNow<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h2 id="中央定时器控制" tabindex="-1"><a class="header-anchor" href="#中央定时器控制" aria-hidden="true">#</a> 中央定时器控制</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> timers <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment">// 定义中央定时器控制对象</span>\n    timerID<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>  <span class="token comment">// 当前正在执行的定时器，为0则表示没有定时器在执行</span>\n\ttimers<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment">// 保存定时器需要执行的所有回调函数</span>\n\t<span class="token function-variable function">add</span><span class="token operator">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 定义add方法，添加回调函数</span>\n\t\t<span class="token keyword">this</span><span class="token punctuation">.</span>timers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t<span class="token function-variable function">start</span><span class="token operator">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">time</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 执行定时器</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>timerID<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token comment">// 没有定时器时，执行一个即时函数来开启中央定时器</span>\n\t\t<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">runNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 执行当前定时器</span>\n\t\t\t<span class="token keyword">if</span><span class="token punctuation">(</span>timers<span class="token punctuation">.</span>timers<span class="token punctuation">.</span>length<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">// 遍历所有回调函数进行执行</span>\n\t\t\t    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>timers<span class="token punctuation">.</span>timers<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t\t\t        <span class="token keyword">if</span><span class="token punctuation">(</span>timers<span class="token punctuation">.</span>timers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">// 当某个回调函数不需要在执行时，将其删除</span>\n\t\t\t            timers<span class="token punctuation">.</span>timers<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\t            i<span class="token operator">--</span><span class="token punctuation">;</span>\n\t\t\t        <span class="token punctuation">}</span>\n\t\t\t    <span class="token punctuation">}</span>\n\t\t\t    timers<span class="token punctuation">.</span>timerID <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>runNext<span class="token punctuation">,</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 等待time时间再次调用定时器</span>\n\t\t\t<span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t<span class="token function-variable function">stop</span><span class="token operator">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 清除定时器</span>\n\t\t<span class="token function">clearTimeout</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>timerID<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">this</span><span class="token punctuation">.</span>timerID <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 测试中央控制器</span>\n<span class="token keyword">var</span> box <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;box&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>\ntimers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tbox<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left<span class="token operator">=</span>x<span class="token operator">+</span><span class="token string">&quot;px&quot;</span><span class="token punctuation">;</span>\n\t<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ntimers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    box<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top<span class="token operator">=</span>y<span class="token operator">+</span><span class="token string">&quot;px&quot;</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>y<span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ntimers<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><div align="center"><img src="/note/images/6/1.gif"></div>',15),t={render:function(n,s){return p}}}}]);