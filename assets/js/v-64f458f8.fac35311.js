(self.webpackChunknote=self.webpackChunknote||[]).push([[9598],{6133:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>p});const p={key:"v-64f458f8",path:"/css-secret/38.html",title:"第三十八章、打字动画",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[],filePathRelative:"css-secret/38.md"}},2918:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>e});const p=(0,a(6252).uE)('<h1 id="第三十八章、打字动画" tabindex="-1"><a class="header-anchor" href="#第三十八章、打字动画" aria-hidden="true">#</a> 第三十八章、打字动画</h1><p>打字动画是对逐帧动画和闪烁动画的一种应用，核心思路是使用动画改变容器的宽度，容器自身带有不换行和超出隐藏效果。 实现打字动画，需要用到ch单位，这个单位表示0字符的宽度，所以需要使用等宽字体</p><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code><span class="token selector">&lt;h1&gt;ABCDEFGHIJKLMNOPQRSTUVWXYZ&lt;/h1&gt;\n&lt;h1&gt;abcdefghijklmnopqrstuvwxyz&lt;/h1&gt;\n\nh1</span><span class="token punctuation">{</span>\n  <span class="token property">font-family</span><span class="token punctuation">:</span> Consolas<span class="token punctuation">;</span> // 设置等宽字体\n  <span class="token property">width</span><span class="token punctuation">:</span>26ch<span class="token punctuation">;</span>  // 以内容字符数量来设置元素宽度\n  <span class="token property">border-right</span><span class="token punctuation">:</span> 1px solid currentColor<span class="token punctuation">;</span> // 又边框模拟闪烁光标\n  <span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span>\n  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>\n  <span class="token property">animation</span><span class="token punctuation">:</span> typing 4s <span class="token function">steps</span><span class="token punctuation">(</span>26<span class="token punctuation">)</span><span class="token punctuation">,</span>\n             border 1s 4s <span class="token function">steps</span><span class="token punctuation">(</span>1<span class="token punctuation">)</span> infinite<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token atrule"><span class="token rule">@keyframes</span> typing</span> <span class="token punctuation">{</span>\n  <span class="token selector">from</span> <span class="token punctuation">{</span>\n    <span class="token property">width</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token atrule"><span class="token rule">@keyframes</span> border</span> <span class="token punctuation">{</span>\n  <span class="token selector">50%</span> <span class="token punctuation">{</span>\n    <span class="token property">border-color</span><span class="token punctuation">:</span>transparent<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><div align="center"><img src="/note/images/css-secret/38/1.gif"></div>',4),e={render:function(n,s){return p}}}}]);