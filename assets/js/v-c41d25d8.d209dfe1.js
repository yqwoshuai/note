(self.webpackChunknote=self.webpackChunknote||[]).push([[243],{7328:(s,n,a)=>{"use strict";a.r(n),a.d(n,{data:()=>e});const e={key:"v-c41d25d8",path:"/js-njia/5.html",title:"第五章、正则表达式",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"正则的解释",slug:"正则的解释",children:[]},{level:2,title:"正则的术语与操作符",slug:"正则的术语与操作符",children:[]},{level:2,title:"匹配的开始与结束",slug:"匹配的开始与结束",children:[]},{level:2,title:"重复出现",slug:"重复出现",children:[]},{level:2,title:"预定义字符类",slug:"预定义字符类",children:[]},{level:2,title:"分组",slug:"分组",children:[]},{level:2,title:"或操作符",slug:"或操作符",children:[]},{level:2,title:"反向引用",slug:"反向引用",children:[]},{level:2,title:"正则表达式的编译",slug:"正则表达式的编译",children:[]},{level:2,title:"捕获匹配的片段",slug:"捕获匹配的片段",children:[]},{level:2,title:"捕获的引用",slug:"捕获的引用",children:[]},{level:2,title:"没有捕获的分组",slug:"没有捕获的分组",children:[]},{level:2,title:"利用函数进行替换",slug:"利用函数进行替换",children:[]},{level:2,title:"常见问题",slug:"常见问题",children:[]}],filePathRelative:"js-njia/5.md"}},2994:(s,n,a)=>{"use strict";a.r(n),a.d(n,{default:()=>p});const e=(0,a(6252).uE)('<h1 id="第五章、正则表达式" tabindex="-1"><a class="header-anchor" href="#第五章、正则表达式" aria-hidden="true">#</a> 第五章、正则表达式</h1><h2 id="正则的解释" tabindex="-1"><a class="header-anchor" href="#正则的解释" aria-hidden="true">#</a> 正则的解释</h2><p>正则表达式的创建</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 两个正斜杠定义正则字面量的边界</span>\n<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">test</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>\n<span class="token comment">// 构造RegExp实例</span>\n<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>3个匹配标志的使用方法</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// i 表示不区分大小写</span>\n<span class="token comment">// g 表示全局匹配，而不是只匹配第一次出现的结果</span>\n<span class="token comment">// m 表示允许多行匹配</span>\n<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">test</span><span class="token regex-delimiter">/</span><span class="token regex-flags">igm</span></span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;igm&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="正则的术语与操作符" tabindex="-1"><a class="header-anchor" href="#正则的术语与操作符" aria-hidden="true">#</a> 正则的术语与操作符</h2><p>匹配一个有限字符集中的某一个字符</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 表示匹配a,b,c中的任意一个字符</span>\n<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[abc]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>在中括号第一个括号后面加入^，表示匹配该组有限字符集以外的字符</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 表示匹配除了a,b,c以外的任意字符</span>\n<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[^abc]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>在字符集之间加入-，表示指定一个范围</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 表示匹配a到m之间的任意字符，包括a和m</span>\n<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[a-m]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>转义，在正则表达式中，字母和数字都能代表自己本身，但类似$-.[]等特殊字符都有其他含义，要匹配这些字符，需要用\\对其进行转义</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 表示匹配$字符</span>\n<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="匹配的开始与结束" tabindex="-1"><a class="header-anchor" href="#匹配的开始与结束" aria-hidden="true">#</a> 匹配的开始与结束</h2><p>当^作为正则表达式的第一个字符时，表示必须从字符串的开头进行匹配。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 表示匹配以abc开头的字符串</span>\n<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^abc</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>当$作为正则表达式的最后一个字符时，表示该模式必须出现在字符串的结尾。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 表示匹配以abc结尾的字符串</span>\n<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">abc$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>同时使用^和$时，表示匹配模式必须包含整个字符串，即匹配模式就是字符串本身，没有任何其他字符。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 表示匹配&quot;abc&quot;这个字符串，&quot;abcabc&quot;之类的不会匹配</span>\n<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^abc$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="重复出现" tabindex="-1"><a class="header-anchor" href="#重复出现" aria-hidden="true">#</a> 重复出现</h2><p>在一个字符后面加一个?，表示该字符是可选的，也就是可以出现一次或不出现</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 表示匹配abc或者bc，</span>\n<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">a?bc</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>在一个字符后面加一个+，表示该字符可以出现一次或多次</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 表示匹配abc或者aaabc，</span>\n<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">a+bc</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>在一个字符后面加一个*，表示该字符可以出现零次或多次，即任意次数</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 表示匹配abc或者aaabc或者bc，</span>\n<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">a*bc</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>在字符后跟花括号，在起重指定一个数字，表示该字符出现的次数</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 表示匹配aaaa，</span>\n<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">a{4}</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>在字符后跟花括号，在起重指定一个区间，表示该字符出现的次数区间</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 表示匹配a出现次数在4到10之间任意次数的字符串，包括4次和10次</span>\n<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">a{4,10}</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>次数区间第二个数值是可选的，当没有第二个数字时，表示匹配一个开区间</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 表示匹配a出现次数至少4次</span>\n<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">a{4,}</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>以上重复操作符可以是贪婪的或者非贪婪的，默认情况下是贪婪的，表示尽可能多的匹配，例如，匹配&quot;aaa&quot;字符串时，/a+/模式将匹配所有3个a。在操作符后面加上?，表示非贪婪模式，将进行最小限度的匹配，匹配&quot;aaa&quot;字符串时，/a+?/模式只会匹配一个a字符。因为一个a字符就满足+表示的一次或多次的情况。</p><h2 id="预定义字符类" tabindex="-1"><a class="header-anchor" href="#预定义字符类" aria-hidden="true">#</a> 预定义字符类</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>\\t  水平制表符\n\\b  空格\n\\n  换行符\n<span class="token punctuation">.</span>   匹配除换行以外的任意字符\n\\d  匹配任意数字，等价于<span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>\n\\<span class="token constant">D</span>  匹配任意非数字，等价于<span class="token punctuation">[</span><span class="token operator">^</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>\n\\w  匹配包括下划线的任意单词字符，等价于<span class="token punctuation">[</span><span class="token constant">A</span><span class="token operator">-</span>Za<span class="token operator">-</span>z0<span class="token operator">-</span><span class="token number">9</span>_<span class="token punctuation">]</span>\n\\<span class="token constant">W</span>  匹配任何非单词字符，等价于<span class="token punctuation">[</span><span class="token operator">^</span><span class="token constant">A</span><span class="token operator">-</span>Za<span class="token operator">-</span>z0<span class="token operator">-</span><span class="token number">9</span>_<span class="token punctuation">]</span>\n\\s  匹配任何空白符，包括空格，制表符，换页符等\n\\<span class="token constant">S</span>  匹配任何非空白字符\n\\b  匹配单词边界\n\\<span class="token constant">B</span>  匹配非单词边界\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="分组" tabindex="-1"><a class="header-anchor" href="#分组" aria-hidden="true">#</a> 分组</h2><p>为匹配模式加上小括号，可以让其成为一个分组，后续添加的操作符可以影响整个分组。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 表示匹配出现一次或连续多次的ab字符串，例如&quot;xxxabxxx&quot;，&quot;xxxabababxxx&quot;</span>\n<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(ab)+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="或操作符" tabindex="-1"><a class="header-anchor" href="#或操作符" aria-hidden="true">#</a> 或操作符</h2><p>竖线|表示或操作符</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 表示匹配a或b</span>\n<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">a|b</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>\n<span class="token comment">// 表示匹配出现一次或多次的&quot;ab&quot;或&quot;ba&quot;</span>\n<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(ab)+|(ba)+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="反向引用" tabindex="-1"><a class="header-anchor" href="#反向引用" aria-hidden="true">#</a> 反向引用</h2><p>反斜杠后面加一个数字表示要引用之前已经匹配到的分组</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// \\1表示再匹配一次第一个分组([ab])匹配到的内容，\\2表示再匹配一次第二个分组(a)匹配到的内容。</span>\n<span class="token comment">// 并且不是再次对分组中的模式进行匹配，而是对已经匹配到的一模一样的内容进行精确匹配。</span>\n<span class="token comment">// 例如第一个分组([ab])匹配到了字符b，\\1匹配的就也必须是字符b</span>\n<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">([ab])(a)\\1\\2</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>反向引用常用来匹配元素的标签</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// \\1表示对第一个分组(\\w+)匹配到的内容再次匹配，内容必须完全相同。因为标签的开始和关闭是相同的。</span>\n<span class="token keyword">var</span> reg <span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;(\\w+)&gt;.*&lt;\\/\\1&gt;</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">&quot;&lt;strong&gt;some thing&lt;/strong&gt;&quot;</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="正则表达式的编译" tabindex="-1"><a class="header-anchor" href="#正则表达式的编译" aria-hidden="true">#</a> 正则表达式的编译</h2><p>正则表达式的编译发生在第一次被创建的时候，而执行则是发生在我们使用编译过的正则表达式进行字符串匹配的时候。所以正则表达式只应该编译一次，并将其保存在一个变量中以供后续使用，这是一个重要的优化过程。每次创建的正则表达式都是一个新的对象，其结果都是独一无二的。 使用构造器（new RegExp()）可以通过动态的字符串创建正则表达式。</p><h2 id="捕获匹配的片段" tabindex="-1"><a class="header-anchor" href="#捕获匹配的片段" aria-hidden="true">#</a> 捕获匹配的片段</h2><p>匹配到的内容中，每一个括号分组都是一个片段，使用字符串的match()方法可以捕获匹配的片段。 在非全局匹配时。其返回结果是一个数组，第一个索引的值是该匹配的完整结果，之后的参数是每一个捕获的片段。 在全局匹配时。其返回结果也是一个数组，但数组的值是所有的匹配结果，每一个匹配结果的捕获片段是不会返回的。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 非全局匹配</span>\n<span class="token keyword">var</span> reg <span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;(\\w+)([^&gt;]*)&gt;</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">&#39;&lt;div class=&quot;abc&quot;&gt;hello&lt;/div&gt;&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> b <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&quot;&lt;div class=&quot;abc&quot;&gt;&quot;, &quot;div&quot;, &quot; class=&quot;abc&quot;&quot;]</span>\n<span class="token comment">// 全局匹配</span>\n<span class="token keyword">var</span> reg <span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;(\\w+)([^&gt;]*)&gt;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">&#39;&lt;div class=&quot;abc&quot;&gt;hello&lt;/div&gt;&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> b <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&quot;&lt;div class=&quot;abc&quot;&gt;&quot;]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>正则表达式的exec()方法，可以对同一个字符串进行多次匹配，每一次匹配都会返回下一个匹配的结果</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> reg <span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;(\\w+)([^&gt;]*)&gt;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">&#39;&lt;div class=&quot;abc&quot;&gt;&lt;p&gt;hello &lt;span&gt;world&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> b <span class="token operator">=</span> reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> c <span class="token operator">=</span> reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> d <span class="token operator">=</span> reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&quot;&lt;div class=&quot;abc&quot;&gt;&quot;]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&quot;&lt;p&gt;&quot;]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&quot;&lt;span&gt;&quot;]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="捕获的引用" tabindex="-1"><a class="header-anchor" href="#捕获的引用" aria-hidden="true">#</a> 捕获的引用</h2><p>在replace()方法中，可以使用$1，$2，$3这样的语法来引用之前捕获到的分组。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 正则中的$1表示第一个捕获到的分组中的内容，即[A-Z]匹配到的内容。</span>\n<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">&#39;borderColor&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> b <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">([A-Z])</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token string">&quot;-$1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// border-color</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="没有捕获的分组" tabindex="-1"><a class="header-anchor" href="#没有捕获的分组" aria-hidden="true">#</a> 没有捕获的分组</h2><p>在分组的左括号后加一个?:标记，表示这个分组不需要被捕获。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?:-[A-Z])</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">&#39;border-Color&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> b <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 只返回了匹配的内容，没有返回分组中的内容</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// undefined</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>在不需要捕获的时候，尽量可能的使用非捕获分组，减少引擎的工作量。</p><h2 id="利用函数进行替换" tabindex="-1"><a class="header-anchor" href="#利用函数进行替换" aria-hidden="true">#</a> 利用函数进行替换</h2><p>replece()方法的第二个参数可以传入一个函数，全局模式下每个匹配都会调用这个函数，该函数有一个参数列表，分别为：</p><ol><li>匹配的完整文本</li><li>匹配的捕获，一个捕获对应一个参数</li><li>匹配字符在元字符串中的索引</li><li>源字符串</li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">up</span><span class="token punctuation">(</span><span class="token parameter">all<span class="token punctuation">,</span>str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">return</span> <span class="token string">&quot;-&quot;</span><span class="token operator">+</span>str<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">&#39;borderBottomColor&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> b <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">([A-Z])</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span>up<span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// border-bottom-color</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>利用这一特性可以修改一些数据的格式，例如将&quot;a=1&amp;a=2&amp;a=3&amp;b=4&amp;b=5&quot;修改为&quot;a=1,2,3&amp;b=4,5&quot;。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">up</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> keys <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 保存数据</span>\n\n\tstr<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">([^=&amp;]+)=([^&amp;]+)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">all<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\tkeys<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">=</span>keys<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">?</span>keys<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">&quot;,&quot;</span><span class="token operator">+</span>value<span class="token operator">:</span>value<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\t<span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\t<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> keys<span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t    result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>key<span class="token operator">+</span><span class="token string">&quot;=&quot;</span><span class="token operator">+</span>keys<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;&amp;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">&#39;a=1&amp;a=2&amp;a=3&amp;b=4&amp;b=5&#39;</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">up</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// a=1,2,3&amp;b=4,5</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="常见问题" tabindex="-1"><a class="header-anchor" href="#常见问题" aria-hidden="true">#</a> 常见问题</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 删除前后空格，低端浏览器不支持trim()方法</span>\n<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">&#39; abc abc &#39;</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\s+|\\s+$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// abc abc</span>\n<span class="token comment">// 匹配换行符，/[\\S\\s]*/ 表示匹配所有字符</span>\n<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">&#39;abc\\nabc&#39;</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[\\S\\s]*</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">// 匹配Unicode</span>\n<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">&#39;\\u5FCD\\u8005\\u30D1\\u30EF\\u30FC&#39;</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[\\w\\u0080-\\uFFFF_-]+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 忍者パワー</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div>',71),p={render:function(s,n){return e}}}}]);