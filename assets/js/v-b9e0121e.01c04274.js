(self.webpackChunknote=self.webpackChunknote||[]).push([[8023],{6402:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>p});const p={key:"v-b9e0121e",path:"/js-njia/8.html",title:"第八章、洞悉特性、属性和样式",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"DOM特性和DOM属性",slug:"dom特性和dom属性",children:[]},{level:2,title:"跨浏览器的attribute问题",slug:"跨浏览器的attribute问题",children:[]},{level:2,title:"样式特性",slug:"样式特性",children:[]},{level:2,title:"获取计算样式",slug:"获取计算样式",children:[]}],filePathRelative:"js-njia/8.md"}},4102:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>t});const p=(0,a(6252).uE)('<h1 id="第八章、洞悉特性、属性和样式" tabindex="-1"><a class="header-anchor" href="#第八章、洞悉特性、属性和样式" aria-hidden="true">#</a> 第八章、洞悉特性、属性和样式</h1><p>特性是DOM构建的一个组成部分，属性是元素保持运行时信息的主要手段。</p><h2 id="dom特性和dom属性" tabindex="-1"><a class="header-anchor" href="#dom特性和dom属性" aria-hidden="true">#</a> DOM特性和DOM属性</h2><p>使用传统的DOM方法getAttribute和setAttribute，或者使用DOM对象上与之对应的属性，都可以访问到元素的特性值。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>e<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ne<span class="token punctuation">.</span>id\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>设置特性的值，也会改变属性的值。但属性和特性并没用使用同一个值。</p><p>使用class字符串可以获取到class特性，但在IE中需要使用className。</p><p>for特性使用htmlFor属性进行表示，class属性使用className属性进行表示。其他多单词组成的特性名称由驼峰式的属性名称表示。</p><p>在页面元素上定义的自定义特性，不会自动转换为元素属性的表示，需要使用DOM方法进行访问。</p><p>因为属性的访问速度比相应的DOM特性方法访问速度要快，所以当不确定一个特性的属性是否存在时，可以先测试再访问。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> value <span class="token operator">=</span> ele<span class="token punctuation">.</span>someValue <span class="token operator">?</span> ele<span class="token punctuation">.</span>someValue <span class="token operator">:</span> ele<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;someValue&#39;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>设置/获取特性值的函数：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> translations <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token string">&quot;for&quot;</span><span class="token operator">:</span> <span class="token string">&quot;htmlFor&quot;</span><span class="token punctuation">,</span>\n  <span class="token string">&quot;class&quot;</span><span class="token operator">:</span> <span class="token string">&quot;className&quot;</span>\n  <span class="token comment">/*其他多单词特性名称转化*/</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nwindow<span class="token punctuation">.</span><span class="token function-variable function">attr</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">ele<span class="token punctuation">,</span> name<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> proName <span class="token operator">=</span> translations<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">||</span> name<span class="token punctuation">;</span>\n  <span class="token keyword">var</span> pro <span class="token operator">=</span> ele<span class="token punctuation">[</span>proName<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>pro<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      ele<span class="token punctuation">[</span>proName<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      ele<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>proName<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>pro<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> ele<span class="token punctuation">[</span>proName<span class="token punctuation">]</span><span class="token punctuation">.</span>nodeName <span class="token operator">?</span> ele<span class="token punctuation">.</span><span class="token function">getAttributeNode</span><span class="token punctuation">(</span>proName<span class="token punctuation">)</span><span class="token punctuation">.</span>nodeValue <span class="token operator">:</span> ele<span class="token punctuation">[</span>proName<span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> ele<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>proName<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h2 id="跨浏览器的attribute问题" tabindex="-1"><a class="header-anchor" href="#跨浏览器的attribute问题" aria-hidden="true">#</a> 跨浏览器的attribute问题</h2><p>input元素的id和name特性将作为form元素的属性值进行引用。产生的属性会自动覆盖form元素上的已有的同名属性。</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>testID<span class="token punctuation">&quot;</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>action<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>\n\nconsole.log(test.id); // <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>可以通过获取描述元素特性本身的原始DOM节点，然后获取该节点的值解决这个问题。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>ele<span class="token punctuation">.</span><span class="token function">getAttributeNode</span><span class="token punctuation">(</span>proName<span class="token punctuation">)</span><span class="token punctuation">.</span>nodeValue\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>在HTML文档中，nodeName属性返回的元素名称都将是大写的，使用前可转为小写。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>ele<span class="token punctuation">.</span>nodeName<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="样式特性" tabindex="-1"><a class="header-anchor" href="#样式特性" aria-hidden="true">#</a> 样式特性</h2><p>元素的style对象属性不会反应从CSS样式表中继承的任何样式信息。style属性中的任何一个样式的优先级都要高于样式表中所继承的样式。</p><p>多单词的CSS样式名称作为属性时，会转换为驼峰式命名。利用正则表达式定义一个转换方法：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">aboutStyle</span><span class="token punctuation">(</span><span class="token parameter">ele<span class="token punctuation">,</span> name<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 获取float属性时，IE使用的是styleFloat属性，其他浏览器使用的是cssFloat属性。</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">===</span> <span class="token string">&#39;float&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    name <span class="token operator">=</span> ele<span class="token punctuation">.</span>style<span class="token punctuation">[</span><span class="token string">&#39;cssFloat&#39;</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token string">&#39;cssFloat&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;styleFloat&#39;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    name <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">-(a-z)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">ig</span></span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">all<span class="token punctuation">,</span> letter</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> letter<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 有些属性的值为数字，不带px之类的单位，以下为其中一部分</span>\n  <span class="token keyword">var</span> translations <span class="token operator">=</span> <span class="token punctuation">{</span>\n    zIndex<span class="token operator">:</span> <span class="token string">&#39;zIndex&#39;</span><span class="token punctuation">,</span>\n    fontWeight<span class="token operator">:</span> <span class="token string">&#39;fontWeight&#39;</span><span class="token punctuation">,</span>\n    opacity<span class="token operator">:</span> <span class="token string">&#39;opacity&#39;</span><span class="token punctuation">,</span>\n    zoom<span class="token operator">:</span> <span class="token string">&#39;zoom&#39;</span><span class="token punctuation">,</span>\n    lineHeight<span class="token operator">:</span> <span class="token string">&#39;lineHeight&#39;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  \n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>translations<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">&#39;number&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    ele<span class="token punctuation">.</span>style<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> value <span class="token operator">+</span> <span class="token string">&#39;px&#39;</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> ele<span class="token punctuation">.</span>style<span class="token punctuation">[</span>name<span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n  \n  <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    ele<span class="token punctuation">.</span>style<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> value\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> ele<span class="token punctuation">.</span>style<span class="token punctuation">[</span>name<span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><p>在非显示元素上，只要尝试获取offsetWidth或offsetHeight属性值，结果都是0。使用以下方法可以获取隐藏元素的宽高。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> <span class="token constant">PROPERTIES</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n    position<span class="token operator">:</span> <span class="token string">&#39;absolute&#39;</span><span class="token punctuation">,</span>\n    visibility<span class="token operator">:</span> <span class="token string">&#39;hidden&#39;</span><span class="token punctuation">,</span>\n    display<span class="token operator">:</span> <span class="token string">&#39;block&#39;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token comment">// 将元素的display设置为block，visibility设置为hidden，position设置为absolute，再获取元素尺寸，完成后再还原。</span>\n  <span class="token keyword">function</span> <span class="token function">getDimensions</span><span class="token punctuation">(</span><span class="token parameter">ele</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> pre <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> <span class="token constant">PROPERTIES</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      pre<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> ele<span class="token punctuation">.</span>style<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n      ele<span class="token punctuation">.</span>style<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">PROPERTIES</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token punctuation">{</span>\n      width<span class="token operator">:</span> ele<span class="token punctuation">.</span>offsetWidth<span class="token punctuation">,</span>\n      height<span class="token operator">:</span> ele<span class="token punctuation">.</span>offsetHeight\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token keyword">in</span> pre<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      ele<span class="token punctuation">.</span>style<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> pre<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> result\n  <span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>获取opacity的值时，支持opacity的浏览器会将其值规范为小于1.0且以0开头的值，例如指定opacity值为.5，支持opacity的浏览器会将其规范为0.5。不支持的则返回原有形式.5。以此可以判断浏览器是否支持opacity。 定义一个获取opacity值的函数。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">getOpacity</span><span class="token punctuation">(</span><span class="token parameter">ele</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  div<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;style&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;opacity: .5&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> opacitySupported <span class="token operator">=</span> div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>opacity <span class="token operator">===</span> <span class="token string">&#39;0.5&#39;</span><span class="token punctuation">;</span>\n  \n  <span class="token keyword">if</span> <span class="token punctuation">(</span>opacitySupported<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> ele<span class="token punctuation">.</span>style<span class="token punctuation">.</span>opacity <span class="token operator">||</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> opacity <span class="token operator">=</span> ele<span class="token punctuation">.</span>style<span class="token punctuation">.</span>filter <span class="token operator">||</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    opacity <span class="token operator">=</span> opacity<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">alpha\\(opacity=(\\S*)\\)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span>opacity <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>`\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="获取计算样式" tabindex="-1"><a class="header-anchor" href="#获取计算样式" aria-hidden="true">#</a> 获取计算样式</h2><p>window.getComputedStyle()方法接收一个要进行样式计算的元素，并返回一个可以进行属性查询的接口，返回的接口提供了一个名为getPropertyValue()的方法，用于检索特定样式属性的计算样式。getPropertyValue()的方法直接接收CSS属性名称，不需要驼峰式转换。IE9之前的版本使用元素的currentStyle属性获取元素的实时计算样式信息。定义一个获取元素样式的方法。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fetchComputedStyle</span><span class="token punctuation">(</span><span class="token parameter">ele<span class="token punctuation">,</span> property</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>getComputedStyle<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> computedStyle <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">getComputedStyle</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>computedStyle<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      property <span class="token operator">=</span> property<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">([A-Z])</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;-$1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">return</span> computedStyle<span class="token punctuation">.</span><span class="token function">getPropertyValue</span><span class="token punctuation">(</span>property<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ele<span class="token punctuation">.</span>currentStyle<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    property <span class="token operator">=</span> property<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">-(a-z)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">ig</span></span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">all<span class="token punctuation">,</span> letter</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> letter<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> ele<span class="token punctuation">.</span>currentStyle<span class="token punctuation">[</span>property<span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>获取属性时，应当检索的是底层的单个属性，例如不能检索border，而应当检索border-top-color这样的属性。</p>',32),t={render:function(n,s){return p}}}}]);