(self.webpackChunknote=self.webpackChunknote||[]).push([[1017],{4368:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>p});const p={key:"v-2b83e61d",path:"/sort/4.html",title:"快速排序",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"一般快速排序",slug:"一般快速排序",children:[]},{level:2,title:"双路快速排序",slug:"双路快速排序",children:[]},{level:2,title:"三路快速排序",slug:"三路快速排序",children:[]}],filePathRelative:"sort/4.md"}},247:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>t});const p=(0,a(6252).uE)('<h1 id="快速排序" tabindex="-1"><a class="header-anchor" href="#快速排序" aria-hidden="true">#</a> 快速排序</h1><p>快速排序的复杂度是O(nlogn)级别</p><h2 id="一般快速排序" tabindex="-1"><a class="header-anchor" href="#一般快速排序" aria-hidden="true">#</a> 一般快速排序</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 快速排序</span>\n<span class="token keyword">function</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 从头到尾进行快排</span>\n  <span class="token function">__quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// 对 [l, r]区间的元素进行排序</span>\n  <span class="token keyword">function</span> <span class="token function">__quickSort</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 递归到底的情况</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&gt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 在需要排序的元素数量较少时，可以转为使用插入排序，因为元素数量较少时，插入排序会更快</span>\n    <span class="token comment">// if (r - l &lt;= 15) {</span>\n    <span class="token comment">//   insertSortRange(arr, l, r)</span>\n    <span class="token comment">//   return</span>\n    <span class="token comment">// }</span>\n    <span class="token comment">// 对[l, r]区间的元素进行分隔操作，返回分隔位的索引</span>\n    <span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token function">__partition</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 对分隔后的两个区间的元素进行递归排序</span>\n    <span class="token function">__quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> l<span class="token punctuation">,</span> p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">__quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  \n  <span class="token comment">// 对[l, r]区间的元素进行分隔操作，返回分隔位的索引p</span>\n  <span class="token comment">// 使得  [l, p-1]区间的元素 &lt; p位置的元素 &lt; [p+1, r]区间的元素</span>\n  <span class="token keyword">function</span> <span class="token function">__partition</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 在[l, r]区间中随机取一个元素作为起始元素</span>\n    <span class="token comment">// 当数组近乎有序时，快速排序会退化为O(n^2)级别的算法，选择一个随机位置可以保证复杂度的期望为O(nlogn)</span>\n    <span class="token keyword">let</span> random <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l<span class="token punctuation">)</span> <span class="token operator">+</span> l<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 将随机选到的元素跟l位置的元素进行交换，使得随机位置的元素在最前面</span>\n    <span class="token keyword">let</span> begin <span class="token operator">=</span> arr<span class="token punctuation">[</span>random<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    arr<span class="token punctuation">[</span>random<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">=</span> begin<span class="token punctuation">;</span>\n    <span class="token comment">// 交换位置后保存为当前作为参考的元素</span>\n    <span class="token keyword">let</span> curi <span class="token operator">=</span> arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token comment">// 记录当前中位数的索引，最开始的中位数索引为l</span>\n    <span class="token keyword">let</span> j <span class="token operator">=</span> l<span class="token punctuation">;</span>\n    <span class="token comment">// 从第l+1个元素开始遍历比较大小</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> r<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 当前遍历的元素小于参考元素时，将当前元素与 j + 1位置进行交换</span>\n      <span class="token comment">// 遍历之后会得到两个区间，使得左侧的元素 &lt; 参考元素 &lt; 右侧的元素</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> curi<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> mid <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> mid<span class="token punctuation">;</span>\n        <span class="token comment">// 交换后左侧的元素增加，中位数位置向后移一位</span>\n        j<span class="token operator">++</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 将参考元素换到两个区间的中间，保证最后数组为：[左侧的元素, 参考元素, 右侧的元素]</span>\n    arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> curi<span class="token punctuation">;</span>\n    <span class="token comment">// 返回中位数位置的索引</span>\n    <span class="token keyword">return</span> j<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> arr<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br></div></div><h2 id="双路快速排序" tabindex="-1"><a class="header-anchor" href="#双路快速排序" aria-hidden="true">#</a> 双路快速排序</h2><p>一般快速排序在处理大量重复数据的数组时，因为大量重复数据的数组会有很多值和中位数相同，所以会导致划分的两个区间极度不平衡。使用双路快速排序可以解决这种问题。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 双路快速排序</span>\n<span class="token keyword">function</span> <span class="token function">quickSortDouble</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">__quickSortDouble</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// 与一般快速排序一样递归快速排序</span>\n  <span class="token keyword">function</span> <span class="token function">__quickSortDouble</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&gt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 在需要排序的元素数量较少时，可以转为使用插入排序，因为元素数量较少时，插入排序会更快</span>\n    <span class="token comment">// if (r - l &lt;= 15) {</span>\n    <span class="token comment">//   insertSortRange(arr, l, r)</span>\n    <span class="token comment">//   return</span>\n    <span class="token comment">// }</span>\n    <span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token function">__partitionDouble</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">__quickSortDouble</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> l<span class="token punctuation">,</span> p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">__quickSortDouble</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">function</span> <span class="token function">__partitionDouble</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 与一般快速排序一样使用随机位置作为参考位</span>\n    <span class="token keyword">let</span> random <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l<span class="token punctuation">)</span> <span class="token operator">+</span> l<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> begin <span class="token operator">=</span> arr<span class="token punctuation">[</span>random<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    arr<span class="token punctuation">[</span>random<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">=</span> begin<span class="token punctuation">;</span>\n    <span class="token keyword">let</span> curi <span class="token operator">=</span> arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token comment">// 定义两个对比位，一个为从前往后，索引为l+1，一个从后往前，索引为r</span>\n    <span class="token comment">// 双路快速排序实际是将右半区的元素搬到了数组的末尾，两个索引分别为左半区的结束位置和右半区的起始位置</span>\n    <span class="token keyword">let</span> i <span class="token operator">=</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>\n      j <span class="token operator">=</span> r<span class="token punctuation">;</span>\n    <span class="token comment">// 在循环体内部判断循环结束的条件</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 下面两个while实际上是把和参考为相等的元素分散在了左右两个区间中，这样就不会出现和参考位相等的数据过多时</span>\n      <span class="token comment">// 两个区间大小极度不平衡的情况。</span>\n      <span class="token comment">// 参考位的元素大于i位置的元素时，不用处理</span>\n      <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> r <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> curi<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        i<span class="token operator">++</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token comment">// 参考位的元素小于j位置的元素时，不用处理</span>\n      <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;=</span> l <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> curi<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        j<span class="token operator">--</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token comment">// 判断循环结束条件，遍历结束跳出</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">break</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token comment">// 交换当前正在对比的i和j位置，保证左侧元素 &lt; 参考位元素 &lt; 右侧元素</span>\n      <span class="token keyword">let</span> mid <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n      arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>\n      arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> mid<span class="token punctuation">;</span>\n      i<span class="token operator">++</span><span class="token punctuation">;</span>\n      j<span class="token operator">--</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 两个区间都排序完成时，将参考位置元素和j位置元素交换，即将参考位置元素放到两个区间中间</span>\n    <span class="token comment">// 使得数组为：[左侧元素，参考位元素，右侧元素]</span>\n    <span class="token keyword">let</span> mid <span class="token operator">=</span> arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> mid<span class="token punctuation">;</span>\n    <span class="token comment">// 返回最终参考位，即中位数位置的索引</span>\n    <span class="token keyword">return</span> j<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> arr<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br></div></div><h2 id="三路快速排序" tabindex="-1"><a class="header-anchor" href="#三路快速排序" aria-hidden="true">#</a> 三路快速排序</h2><p>三路快速排序和双路快速排序一样对大量重复数据的数组做了优化</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 三路快速排序</span>\n<span class="token keyword">function</span> <span class="token function">quickSortThrid</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 与一般快速排序一样递归快速排序</span>\n  <span class="token function">__quickSortThrid</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">function</span> <span class="token function">__quickSortThrid</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&gt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 在需要排序的元素数量较少时，可以转为使用插入排序，因为元素数量较少时，插入排序会更快</span>\n    <span class="token comment">// if (r - l &lt;= 15) {</span>\n    <span class="token comment">//   insertSortRange(arr, l, r)</span>\n    <span class="token comment">//   return</span>\n    <span class="token comment">// }</span>\n    <span class="token comment">// 与一般快速排序一样使用随机位置作为参考位</span>\n    <span class="token keyword">let</span> random <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l<span class="token punctuation">)</span> <span class="token operator">+</span> l<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> begin <span class="token operator">=</span> arr<span class="token punctuation">[</span>random<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    arr<span class="token punctuation">[</span>random<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">=</span> begin<span class="token punctuation">;</span>\n    <span class="token keyword">let</span> curi <span class="token operator">=</span> arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token comment">// 定义3个对比位，使得左侧元素为[l, lt]，右侧元素为[gt, r]，i为当前对比位</span>\n    <span class="token comment">// 三路快速排序实际是将等于参考位的元素也划分为了一个区间放在中间</span>\n    <span class="token keyword">let</span> lt <span class="token operator">=</span> l<span class="token punctuation">;</span>\n    <span class="token keyword">let</span> gt <span class="token operator">=</span> r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> i <span class="token operator">=</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token comment">// 当遍历到gt位置，即遍历到右区间时，结束遍历</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> gt<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 当前对比位的元素小于参考位的元素时，将对比位元素和中间区间的第一个元素进行交换</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> curi<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> mid <span class="token operator">=</span> arr<span class="token punctuation">[</span>lt <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        arr<span class="token punctuation">[</span>lt <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> mid<span class="token punctuation">;</span>\n        <span class="token comment">// 左侧区间像后移一位，这样交换过来的对比位元素就成为了左侧区间的最后一个元素</span>\n        lt<span class="token operator">++</span><span class="token punctuation">;</span>\n        <span class="token comment">// 对比位向后移一位对比下一个元素</span>\n        i<span class="token operator">++</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> curi<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 当前对比位元素大于参考位元素时，将对比位元素和右侧区间的第一个元素进行交换</span>\n        <span class="token keyword">let</span> mid <span class="token operator">=</span> arr<span class="token punctuation">[</span>gt <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        arr<span class="token punctuation">[</span>gt <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> mid<span class="token punctuation">;</span>\n        <span class="token comment">// 只需要将右侧区间起始位像前移动一位，对比位元素因为是从右侧区间交换过去的，所以不需要动</span>\n        gt<span class="token operator">--</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 当前对比位元素等于参考位元素时，直接不作处理对比下一个元素</span>\n        <span class="token comment">// 这样自然就将等于参考位的元素都放在了中间区域</span>\n        i<span class="token operator">++</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 最后将参考位元素和左侧区间的最后一个元素进行交换</span>\n    <span class="token comment">// 使得数组为：[左侧元素，中间区域元素，右侧元素]</span>\n    <span class="token keyword">let</span> mid <span class="token operator">=</span> arr<span class="token punctuation">[</span>lt<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    arr<span class="token punctuation">[</span>lt<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">=</span> mid<span class="token punctuation">;</span>\n    <span class="token function">__quickSortThrid</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> l<span class="token punctuation">,</span> lt <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">__quickSortThrid</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> gt<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> arr<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br></div></div>',10),t={render:function(n,s){return p}}}}]);