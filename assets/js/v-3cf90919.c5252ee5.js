(self.webpackChunknote=self.webpackChunknote||[]).push([[9592],{7727:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>t});const t={key:"v-3cf90919",path:"/js-develop/14.html",title:"第十四章、表单脚本",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"表单的基础知识",slug:"表单的基础知识",children:[{level:3,title:"提交表单",slug:"提交表单",children:[]},{level:3,title:"重置表单",slug:"重置表单",children:[]},{level:3,title:"表单字段",slug:"表单字段",children:[]}]},{level:2,title:"文本框脚本",slug:"文本框脚本",children:[{level:3,title:"选择文本",slug:"选择文本",children:[]},{level:3,title:"过滤输入",slug:"过滤输入",children:[]},{level:3,title:"自动切换焦点",slug:"自动切换焦点",children:[]},{level:3,title:"HTML5约束验证API",slug:"html5约束验证api",children:[]}]},{level:2,title:"选择框脚本",slug:"选择框脚本",children:[{level:3,title:"选择选项",slug:"选择选项",children:[]},{level:3,title:"添加选项",slug:"添加选项",children:[]},{level:3,title:"移除选项",slug:"移除选项",children:[]},{level:3,title:"移动和重排选项",slug:"移动和重排选项",children:[]}]},{level:2,title:"表单序列化",slug:"表单序列化",children:[]}],filePathRelative:"js-develop/14.md"}},8288:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>p});const t=(0,a(6252).uE)('<h1 id="第十四章、表单脚本" tabindex="-1"><a class="header-anchor" href="#第十四章、表单脚本" aria-hidden="true">#</a> 第十四章、表单脚本</h1><h2 id="表单的基础知识" tabindex="-1"><a class="header-anchor" href="#表单的基础知识" aria-hidden="true">#</a> 表单的基础知识</h2><p>表单由&lt;form&gt;元素来表示，继承自HTMLElement类型，除具有HTML元素相同的默认属性外，还具有以下属性和方法：<br> action属性，接受请求的URL；<br> elements属性，表单中所有控件的合集；<br> length属性，表单中控件的数量；<br> method属性，要发送的HTTP请求类型，通常是get或post；<br> name属性，表单的名称；<br> reset()方法，将表单域重置为默认值；<br> submit()方法，提交表单。<br> 除使用基本的DOM获取方法获取表单外，document.forms属性可以取得页面中所有的表单，可以通过索引或name值来取得特定表单。</p><h3 id="提交表单" tabindex="-1"><a class="header-anchor" href="#提交表单" aria-hidden="true">#</a> 提交表单</h3><p>单机提交按钮或图像按钮时会提交表单，type属性为&quot;submit&quot;的&lt;input&gt;标签和&lt;button&gt;标签会生成提交按钮，type属性为&quot;image&quot;的&lt;input&gt;标签会生成图像按钮。</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>提交<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>提交<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>image<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>tijiao.jpg<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>在具有这三种控件的表单获得焦点时，按下回车键就会提交表单，浏览器在提交表单时会触发submit事件，可以在此验证表单，并决定是否提交，阻止事件的默认行为就可以取消表单的提交。submit()方法也可以提交表单，但使用此方法提交表单不会触发submit事件。</p><p>为防止表单的重复提交，在第一次提交表单后，就应该禁用提交按钮，或者利用onsubmit事件处理程序取消后续的表单提交操作。</p><h3 id="重置表单" tabindex="-1"><a class="header-anchor" href="#重置表单" aria-hidden="true">#</a> 重置表单</h3><p>单机重置按钮时，表单的所有控件都会被重置为默认值，type属性为&quot;reset&quot;属性的&lt;input&gt;标签和&lt;button&gt;标签会生成重置按钮。</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>reset<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>重置<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>reset<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>重置<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>单击重置按钮时，会触发reset事件，阻止事件的默认行为可以取消表单的重置，reset()方法也可以重置表单，调用reset()方法时，也会触发reset事件。</p><h3 id="表单字段" tabindex="-1"><a class="header-anchor" href="#表单字段" aria-hidden="true">#</a> 表单字段</h3><p>每个表单都有elements属性，该属性是表单中所有表单元素的集合。可以按照每个控件元素出现的顺序或name属性来获取它们。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> f1<span class="token operator">=</span> document<span class="token punctuation">.</span>forms<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>elements<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> f2<span class="token operator">=</span> document<span class="token punctuation">.</span>forms<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>elements<span class="token punctuation">[</span><span class="token string">&quot;first&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>使用name方式获取表单元素时，如果有多个表单使用同一个name（单选按钮），则返回一个以该name命名的NodeList。使用索引方式获取表单元素则只会返回第一个匹配的表单元素。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//&lt;form&gt;</span>\n<span class="token comment">//\t&lt;input type=&quot;radio&quot; name=&quot;first&quot; value=&quot;red&quot;&gt;</span>\n<span class="token comment">//\t&lt;input type=&quot;radio&quot; name=&quot;first&quot; value=&quot;blue&quot;&gt;</span>\n<span class="token comment">//\t&lt;input type=&quot;radio&quot; name=&quot;first&quot; value=&quot;green&quot;&gt;</span>\n<span class="token comment">//&lt;/form&gt;</span>\n\n<span class="token keyword">var</span> f1<span class="token operator">=</span> document<span class="token punctuation">.</span>forms<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>elements<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> f2<span class="token operator">=</span> document<span class="token punctuation">.</span>forms<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>elements<span class="token punctuation">[</span><span class="token string">&quot;first&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f1 <span class="token operator">===</span> f2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>表单字段的共有属性：<br> disabled属性，布尔值，表示当前表单是否禁用；<br> form属性，指向当前字段所属的表单；<br> name属性，当前字段名称；<br> readOnly属性，布尔值，表示当前字段是否只读；<br> tabIndex属性，表示当前字段的切换序号；<br> type属性，当前字段的类型；<br> value属性，当前字段被提交给服务器的值，文件字段中是只读的，表示文件在计算机中的路径。</p><p>表单字段共有的方法：<br> focus()方法，将浏览器焦点设置到当前字段。<br> blur()方法，将浏览器焦点从表单控件中移除。<br> HTML5新添加autofocus属性，设置了这个属性的表单控件在进入页面时会自动获得焦点。</p><p>表单字段共有的事件：<br> blur事件，当前字段失去焦点时触发。<br> change事件，&lt;input&gt;元素和&lt;textarea&gt;元素失去焦点且value的值发生变化时触发，&lt;select&gt;元素的选项发生改变时触发。<br> focus事件，当前字段获得焦点时触发。<br> 调用focus()和blur()方法同样会触发focus和blur事件。</p><h2 id="文本框脚本" tabindex="-1"><a class="header-anchor" href="#文本框脚本" aria-hidden="true">#</a> 文本框脚本</h2><p>type属性为&quot;text&quot;的&lt;input&gt;元素表示单行文本框，&lt;textarea&gt;元素表示多行文本框。size特性指定文本框中能够显示的字符数。value特性可以设置文本框的初始值（&lt;textarea&gt;元素的初始值在标签中间）。maxlength特性用于指定文本框可以接受的最大字符数。 用户数的输入内容都保存在表单字段的value属性中。要更改value值时，直接使用value属性，不要使用DOM去修改文本框的值。</p><h3 id="选择文本" tabindex="-1"><a class="header-anchor" href="#选择文本" aria-hidden="true">#</a> 选择文本</h3><p>select()方法，可以选中文本框中的所有文本，在文本框获得焦点时，选择其所有文本，可以方便一次性修改。<br> 在选择文本框中的文本时，就会触发select事件，在调用select()方法时，也会触发select事件。selectionStart和selectionEnd两个属性分别保存所选文本的开头和结尾偏移量。使用下列方法可以获取选择的文本：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">&quot;text&quot;</span> value<span class="token operator">=</span><span class="token string">&quot;hello world!&quot;</span><span class="token operator">&gt;</span>\n\n<span class="token keyword">var</span> f1<span class="token operator">=</span> document<span class="token punctuation">.</span>forms<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>elements<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nEventUtil<span class="token punctuation">.</span><span class="token function">addHandler</span><span class="token punctuation">(</span>f1<span class="token punctuation">,</span><span class="token string">&quot;select&quot;</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f1<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>f1<span class="token punctuation">.</span>selectionStart<span class="token punctuation">,</span>f1<span class="token punctuation">.</span>selectionEnd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>setSelectionRange()方法可以选择文本框的一部分文本，接收两个参数，要选择的第一个字符的索引和要选择的最后一个字符之后的字符的索引。要看到选择的文本，必须在之前或之后立即将焦点设置到文本框上。</p><h3 id="过滤输入" tabindex="-1"><a class="header-anchor" href="#过滤输入" aria-hidden="true">#</a> 过滤输入</h3><p>只允许用户输入数值：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>EventUtil<span class="token punctuation">.</span><span class="token function">addHandler</span><span class="token punctuation">(</span>f1<span class="token punctuation">,</span><span class="token string">&quot;keypress&quot;</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tevent <span class="token operator">=</span> EventUtil<span class="token punctuation">.</span><span class="token function">getEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token keyword">var</span> charCode <span class="token operator">=</span> EventUtil<span class="token punctuation">.</span><span class="token function">getCharCode</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span>charCode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>charCode<span class="token operator">&gt;</span><span class="token number">9</span><span class="token operator">&amp;&amp;</span><span class="token operator">!</span>event<span class="token punctuation">.</span>ctrlKey<span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t    EventUtil<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>通过/\\d/测试值是否为数字，在Firefox中，所有非字符键触发的keypress事件对应的字符编码为0，早期Safari版本为8，所以不能屏蔽小于9的按键，因为此代码还会屏蔽Ctrl+C，Ctrl+V之类的组合件，所以还要检测是否按下Ctrl键。</p><p>剪贴板事件：<br> beforecopy事件，在发生复制操作前触发；<br> copy事件，发生复制操作时触发；<br> beforecut事件，在发生剪切操作前触发；<br> cut事件，发生剪切操作时触发；<br> beforepaste事件，在发生粘贴操作前触发；<br> paste事件，发生粘贴操作时触发；<br> 发生剪贴板事件时，可以使用clipboardDate对象访问剪贴板中的数据，在IE中是window对象的属性，在其他浏览器中是事件对象的属性。此对象有3个方法：<br> getData()，从剪贴板中取得数据，接受一个参数，一般为&quot;text&quot;；只有在onpaste事件处理程序中才可以使用此方法。<br> setData()，设置剪贴板中的数据，接受两个参数，第一个为&quot;text/plain&quot;，在IE中为&quot;text&quot;，第二个是要放在剪贴板中的数据，成功设置剪贴板中的数据后，返回true，否则返回false。</p><p>修改复制文本框中内容的方法：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> f1<span class="token operator">=</span> document<span class="token punctuation">.</span>forms<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>elements<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> str <span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>\nEventUtil<span class="token punctuation">.</span><span class="token function">addHandler</span><span class="token punctuation">(</span>f1<span class="token punctuation">,</span><span class="token string">&quot;select&quot;</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    event <span class="token operator">=</span> EventUtil<span class="token punctuation">.</span><span class="token function">getEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    str <span class="token operator">=</span> f1<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>f1<span class="token punctuation">.</span>selectionStart<span class="token punctuation">,</span>f1<span class="token punctuation">.</span>selectionEnd<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nEventUtil<span class="token punctuation">.</span><span class="token function">addHandler</span><span class="token punctuation">(</span>f1<span class="token punctuation">,</span><span class="token string">&quot;copy&quot;</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    event <span class="token operator">=</span> EventUtil<span class="token punctuation">.</span><span class="token function">getEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    str<span class="token operator">+=</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">;</span>\n    EventUtil<span class="token punctuation">.</span><span class="token function">setClipboardText</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    EventUtil<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nEventUtil<span class="token punctuation">.</span><span class="token function">addHandler</span><span class="token punctuation">(</span>f1<span class="token punctuation">,</span><span class="token string">&quot;paste&quot;</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    event <span class="token operator">=</span> EventUtil<span class="token punctuation">.</span><span class="token function">getEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> a <span class="token operator">=</span> EventUtil<span class="token punctuation">.</span><span class="token function">getClipboardText</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    EventUtil<span class="token punctuation">.</span><span class="token function">setClipboardText</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h3 id="自动切换焦点" tabindex="-1"><a class="header-anchor" href="#自动切换焦点" aria-hidden="true">#</a> 自动切换焦点</h3><p>为增强易用性，同时加快数据输入，可以在前一个文本框中的字符达到最大数量后，自动将焦点切换到下一个文本框。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//&lt;form&gt;</span>\n<span class="token comment">//\t&lt;input  type=&quot;text&quot; value=&quot;&quot; maxlength=&quot;3&quot;&gt;</span>\n<span class="token comment">//\t&lt;input  type=&quot;text&quot; value=&quot;&quot; maxlength=&quot;3&quot;&gt;</span>\n<span class="token comment">//\t&lt;input  type=&quot;text&quot; value=&quot;&quot; maxlength=&quot;3&quot;&gt;</span>\n<span class="token comment">//&lt;/form&gt;</span>\n\n<span class="token keyword">function</span> <span class="token function">tabInput</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tevent<span class="token operator">=</span>EventUtil<span class="token punctuation">.</span><span class="token function">getEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token keyword">var</span> target <span class="token operator">=</span> EventUtil<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token keyword">if</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span>value<span class="token punctuation">.</span>length <span class="token operator">===</span> target<span class="token punctuation">.</span>maxLength<span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t    <span class="token keyword">var</span> form <span class="token operator">=</span> target<span class="token punctuation">.</span>form<span class="token punctuation">;</span>\n\t    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token operator">=</span>form<span class="token punctuation">.</span>elements<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t        <span class="token keyword">if</span><span class="token punctuation">(</span>form<span class="token punctuation">.</span>elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">===</span>target<span class="token punctuation">)</span><span class="token punctuation">{</span>\n                <span class="token keyword">if</span><span class="token punctuation">(</span>form<span class="token punctuation">.</span>elements<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                    form<span class="token punctuation">.</span>elements<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    form<span class="token punctuation">.</span>elements<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n                <span class="token keyword">return</span><span class="token punctuation">;</span>\n\t        <span class="token punctuation">}</span>\n\t    <span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> f0 <span class="token operator">=</span> document<span class="token punctuation">.</span>forms<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>elements<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> f1 <span class="token operator">=</span> document<span class="token punctuation">.</span>forms<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>elements<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> f2 <span class="token operator">=</span> document<span class="token punctuation">.</span>forms<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>elements<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nEventUtil<span class="token punctuation">.</span><span class="token function">addHandler</span><span class="token punctuation">(</span>f0<span class="token punctuation">,</span><span class="token string">&quot;keyup&quot;</span><span class="token punctuation">,</span>tabInput<span class="token punctuation">)</span><span class="token punctuation">;</span>\nEventUtil<span class="token punctuation">.</span><span class="token function">addHandler</span><span class="token punctuation">(</span>f1<span class="token punctuation">,</span><span class="token string">&quot;keyup&quot;</span><span class="token punctuation">,</span>tabInput<span class="token punctuation">)</span><span class="token punctuation">;</span>\nEventUtil<span class="token punctuation">.</span><span class="token function">addHandler</span><span class="token punctuation">(</span>f2<span class="token punctuation">,</span><span class="token string">&quot;keyup&quot;</span><span class="token punctuation">,</span>tabInput<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><h3 id="html5约束验证api" tabindex="-1"><a class="header-anchor" href="#html5约束验证api" aria-hidden="true">#</a> HTML5约束验证API</h3><p>required属性，表示必填字段。在JavaScript中检测此属性可以检查此字段是否必填。存在这个属性则为true，不存在则为false。</p><p>email，url类型。当type属性为这两个时，浏览器会对内容进行验证，email必须为email值，url必须为url值。注意必须添加required属性，否则空文本也会通过验证。</p><p>数值类型：&quot;number&quot;、&quot;range&quot;、&quot;datetime&quot;、&quot;datetime-local&quot;、&quot;date&quot;、&quot;month&quot;、&quot;week&quot;、&quot;time&quot;。这些类型都基于数字。可以指定min和max来表示最小值和最大值。step属性表示每次变化的增量。还有stepUp()和stepDown()两个方法，都接收一个参数，即要加减的数值，默认为1。</p><p>pattern属性，一个正则表达式，用于匹配文本框中的值。模式的开头不用加^和&amp;符号，假定已经有了。表示输入的值必须从头到尾都和模式匹配。在JavaScript中检测此属性可以访问匹配模式。</p><p>checkValidity()方法，检测表单中某个字段是否有效。所有表单字段都有这个方法，有效则返回true，否则返回false。要检测整个表单是否有效，可以直接在表单自身调用该方法。</p><p>validity对象可以告知有效或无效的具体信息。包含以下属性：<br> customError属性，表示是否设置了setCustomValidity()，设置了返回true，否则返回false；<br> patternMismatch属性，如果与指定的pattern属性不匹配，则返回true；<br> rangeOverflow属性，如果值比max大，则返回true；<br> stepMisMatch属性，如果不是位于min和max之间的由step增量得到的值，则返回true；<br> toolong属性，如果长度超过maxlength的值，则返回true；<br> typeMismatch属性，如果不是mail或者url要求的格式，则返回true；<br> valid属性， 如果这里其他属性都为false，则返回true，与checkValidity()方法相同；<br> valueMissing属性，如果标注为required字段中没有值，则返回true。</p><p>novalidate属性，设置于表单上，表示表单不需要验证。</p><p>formnovalidate属性，设置于submit按钮上，表示通过该按钮提交的表单不需要验证。</p><h2 id="选择框脚本" tabindex="-1"><a class="header-anchor" href="#选择框脚本" aria-hidden="true">#</a> 选择框脚本</h2><p>选择框由&lt;select&gt;和&lt;option&gt;组成，具有以下属性和方法：<br> add()方法，向控件中插入新的&lt;option&gt;元素，接收两个参数，第一个参数为需要插入的元素，第二个参数为参考位置，插入位置在参考位置之前；<br> multiple属性，布尔值，表示是否允许多选，与HTML中指定的multiple特性相同；<br> options属性，控件中所有&lt;option&gt;元素的集合；<br> remove()方法，移除指定选项，传入参数为需要移除的项的索引；<br> selectedIndex属性，基于0的选中项的索引，如果没有选中项，则为-1，多选控件中只保存选中的第一项的索引；<br> size属性，选框中可见的行数，与HTML中指定的size特性相同；<br> type属性，只有两种，单选&quot;select-one&quot;和多选&quot;select-multiple&quot;；<br> value属性，没有选中项时，value属性为空值，选中了一个项时，若HTML中指定了value特性，则为value特性值，若没指定，则为文本值，选中了多个项时，value属性将只取第一个选中项的值。</p><p>每个&lt;option&gt;都具有以下属性：<br> index属性，当前选项在options集合中的索引；<br> label属性，当前选项的标签；<br> selected属性，布尔值，表示当前选项是否被选中，设置为true可以选中当前选项；<br> text属性，选项的文本；<br> value属性，选项的值。</p><h3 id="选择选项" tabindex="-1"><a class="header-anchor" href="#选择选项" aria-hidden="true">#</a> 选择选项</h3><p>对于单选框，访问选中项的方法就是使用selectedIndex属性。<br> 对于多选框，设置selectedIndex属性会取消之前选中的的项，并选择指定的项，读取selectedIndex属性只会返回第一条选中的项的索引。对于多选框，可以先取得其引用，再对其设置selected属性为true。selected属性不会取消其他选项。<br> 取得多选框中所有的选中项：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">getSelectedOptions</span><span class="token punctuation">(</span><span class="token parameter">selectbox</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\t<span class="token keyword">var</span> option <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n\t<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>selectbox<span class="token punctuation">.</span>options<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t    option <span class="token operator">=</span> selectbox<span class="token punctuation">.</span>options<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\t    <span class="token keyword">if</span><span class="token punctuation">(</span>option<span class="token punctuation">.</span>selected<span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t    <span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token keyword">return</span> result<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="添加选项" tabindex="-1"><a class="header-anchor" href="#添加选项" aria-hidden="true">#</a> 添加选项</h3><p>第一种方法是使用常规DOM方法appendChild()添加选项。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> newOption <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;option&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nnewOption<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span><span class="token string">&quot;text&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nnewOption<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;value&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;new value&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nselectbox<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>newOption<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>第二种方法是使用Option构造函数，该构造函数接收两个参数，一个是文本，一个是值。创建实例后可直接用DOM方法appendChild()添加到选框中。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> newOption <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Option</span><span class="token punctuation">(</span><span class="token string">&quot;Option text&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Option value&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nselectbox<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>newOption<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>第三种方法是使用选择框的add()方法，接收两个参数为：要添加的新选项和将要位于新选项之后的选项。将第二个参数设置为undefined，可以直接将选项添加到列表最后。js</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>var newOption = new Option(&quot;Option text&quot; , &quot;Option value&quot;);\nselectbox.add(newOption, undefined);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="移除选项" tabindex="-1"><a class="header-anchor" href="#移除选项" aria-hidden="true">#</a> 移除选项</h3><p>第一种方法是使用常规DOM方法removeChild()移除选项。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>selectbox<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>selectbox<span class="token punctuation">.</span>options<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>第二种方法是使用选择框的remove()方法，接收一个参数，即为要移除选项的索引。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>selectbox<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>第三种方法是直接将对应的选项设置为null。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>selectbox<span class="token punctuation">.</span>options<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="移动和重排选项" tabindex="-1"><a class="header-anchor" href="#移动和重排选项" aria-hidden="true">#</a> 移动和重排选项</h3><p>将一个选择框的选项移动到另一个选择框中，可以直接使用DOM的appendChild()方法，因为appendChild()方法传入的是一个文档中已经存在的元素的话，那么就会现从该元素的父节点将其删除，再将其添加到指定的位置。</p><p>重新排序选择框同样也是使用DOM的insertBefore()方法，appendChild()方法只能将某个选项移到最后。</p><h2 id="表单序列化" tabindex="-1"><a class="header-anchor" href="#表单序列化" aria-hidden="true">#</a> 表单序列化</h2><p>表单提交的数据：<br> 对表单字段的名称和值进行URL编码，使用&amp;号；<br> 不发送禁用的表单字段；<br> 只发送勾选的复选框和单选按钮；<br> 不发送type为&quot;reset&quot;和&quot;button&quot;的按钮；<br> 多选框中的每个选中值为单独一个条目；<br> 在单击提交按钮时才会发送提交按钮；<br> &lt;select&gt;元素的值为选中的&lt;option&gt;元素的value值。</p><p>表单序列化方法：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token parameter">form</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t<span class="token keyword">var</span> parts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> field <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> len<span class="token punctuation">,</span> j<span class="token punctuation">,</span> optLen<span class="token punctuation">,</span> option<span class="token punctuation">,</span> optValue<span class="token punctuation">;</span>\n\t<span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token operator">=</span>form<span class="token punctuation">.</span>elements<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t    field <span class="token operator">=</span> form<span class="token punctuation">.</span>elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\t    <span class="token keyword">switch</span> <span class="token punctuation">(</span>field<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t\t    <span class="token keyword">case</span> <span class="token string">&quot;select-one&quot;</span><span class="token operator">:</span>\n\t\t    <span class="token keyword">case</span> <span class="token string">&quot;select-multiple&quot;</span><span class="token operator">:</span>\n\t\t    <span class="token keyword">if</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span>name<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t\t        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>optLen<span class="token operator">=</span>field<span class="token punctuation">.</span>options<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">&lt;</span>optLen<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t\t            option <span class="token operator">=</span> field<span class="token punctuation">.</span>options<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\t\t            <span class="token keyword">if</span><span class="token punctuation">(</span>option<span class="token punctuation">.</span>selected<span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t\t                optValue <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>\n\t\t                <span class="token keyword">if</span><span class="token punctuation">(</span>option<span class="token punctuation">.</span>hasAttribute<span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t\t                    optValue <span class="token operator">=</span> <span class="token punctuation">(</span>option<span class="token punctuation">.</span><span class="token function">hasAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;value&quot;</span><span class="token punctuation">)</span> <span class="token operator">?</span> option<span class="token punctuation">.</span>value <span class="token operator">:</span> option<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>\n\t\t                    optValue <span class="token operator">=</span> <span class="token punctuation">(</span>option<span class="token punctuation">.</span>attributes<span class="token punctuation">[</span><span class="token string">&quot;value&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>specified <span class="token operator">?</span> option<span class="token punctuation">.</span>value <span class="token operator">:</span>option<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t                <span class="token punctuation">}</span>\n\t\t                parts<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;=&quot;</span> <span class="token operator">+</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>optValue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t            <span class="token punctuation">}</span>\n\t\t        <span class="token punctuation">}</span>\n\t\t    <span class="token punctuation">}</span>\n\t\t        <span class="token keyword">break</span><span class="token punctuation">;</span>\n\n\t\t    <span class="token keyword">case</span> <span class="token keyword">undefined</span><span class="token operator">:</span>\n\t\t    <span class="token keyword">case</span> <span class="token string">&quot;file&quot;</span><span class="token operator">:</span>\n\t\t    <span class="token keyword">case</span> <span class="token string">&quot;submit&quot;</span><span class="token operator">:</span>\n\t\t    <span class="token keyword">case</span> <span class="token string">&quot;reset&quot;</span><span class="token operator">:</span>\n\t\t    <span class="token keyword">case</span> <span class="token string">&quot;button&quot;</span><span class="token operator">:</span>\n\t\t        <span class="token keyword">break</span><span class="token punctuation">;</span>\n\n\t\t    <span class="token keyword">case</span> <span class="token string">&quot;radio&quot;</span><span class="token operator">:</span>\n\t\t    <span class="token keyword">case</span> <span class="token string">&quot;checkbox&quot;</span><span class="token operator">:</span>\n\t\t        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>field<span class="token punctuation">.</span>checked<span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t\t            <span class="token keyword">break</span><span class="token punctuation">;</span>\n\t\t        <span class="token punctuation">}</span>\n\t\t    <span class="token keyword">default</span><span class="token operator">:</span>\n\t\t        <span class="token keyword">if</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span>name<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>\n                    parts<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;=&quot;</span> <span class="token operator">+</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>optValue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t        <span class="token punctuation">}</span>\n\t    <span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token keyword">return</span> parts<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;&amp;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br></div></div>',72),p={render:function(n,s){return t}}}}]);