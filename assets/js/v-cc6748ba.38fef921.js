(self.webpackChunknote=self.webpackChunknote||[]).push([[7931],{3076:(n,a,s)=>{"use strict";s.r(a),s.d(a,{data:()=>e});const e={key:"v-cc6748ba",path:"/js-develop/3.html",title:"第三章、基本概念",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"语法",slug:"语法",children:[]},{level:2,title:"变量",slug:"变量",children:[]},{level:2,title:"数据类型",slug:"数据类型",children:[{level:3,title:"Null类型和Undefined类型",slug:"null类型和undefined类型",children:[]},{level:3,title:"数值类型",slug:"数值类型",children:[]},{level:3,title:"String类型",slug:"string类型",children:[]},{level:3,title:"Object类型",slug:"object类型",children:[]}]},{level:2,title:"函数",slug:"函数",children:[]}],filePathRelative:"js-develop/3.md"}},5409:(n,a,s)=>{"use strict";s.r(a),s.d(a,{default:()=>t});const e=(0,s(6252).uE)('<h1 id="第三章、基本概念" tabindex="-1"><a class="header-anchor" href="#第三章、基本概念" aria-hidden="true">#</a> 第三章、基本概念</h1><h2 id="语法" tabindex="-1"><a class="header-anchor" href="#语法" aria-hidden="true">#</a> 语法</h2><p>ECMAScript中的一切变量名和操作符都区分大小写。</p><p>标识符：变量、函数、属性的名字，或者函数的参数。第一个字符必须是字母、下划线(_)或者一个美元符号($)。使用驼峰式大小写。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 这是单行注释</span>\n\n<span class="token comment">/*\n * 这是多行注释\n *\n */</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>在整个脚本顶部添加&quot;use strict&quot;，整个脚本进入严格模式，在函数顶部添加&quot;use strict&quot;，函数进入严格模式。</p><h2 id="变量" tabindex="-1"><a class="header-anchor" href="#变量" aria-hidden="true">#</a> 变量</h2><p>ECMAScript的变量是松散类型的，可以用来保存任何类型的数据，使用var操作符后跟变量名来定义变量。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> massage<span class="token punctuation">;</span>\n<span class="token comment">// 未经过初始化的变量会保存一个特殊的值undefined。</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>省略var操作符的变量会变成全局变量。</p><h2 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型" aria-hidden="true">#</a> 数据类型</h2><p>对一个值使用typeof操作符可以判断其类型：<br> 未定义值返回undefined；<br> 布尔值返回boolean；<br> 字符串返回string；<br> 数值返回number；<br> 对象或者null返回object；（null被认为是一个空对象的引用）<br> 函数返回functiion；</p><h3 id="null类型和undefined类型" tabindex="-1"><a class="header-anchor" href="#null类型和undefined类型" aria-hidden="true">#</a> Null类型和Undefined类型</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">null</span> <span class="token operator">==</span> <span class="token keyword">undefined</span> <span class="token comment">// true 因为undefined值是派生自null的，所以相等性测试返回true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>任何非空字符串 == true，&quot;&quot; == false<br> 任何非0数字 == true，0和NaN == false<br> 任何对象 == true， null == false<br> undefined ==false</p><h3 id="数值类型" tabindex="-1"><a class="header-anchor" href="#数值类型" aria-hidden="true">#</a> 数值类型</h3><p>数字中最大值为 Number.MAX_VALUE，最小值为 Number.MIN_VALUE，使用isFinite()函数判断一个数值是否位于最大最小值之间。</p><p>NaN表示一个本来要返回数值的操作但未返回数值的情况。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token number">NaN</span> <span class="token operator">==</span> <span class="token number">NaN</span> <span class="token comment">// false</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>使用isNaN()可以判断一个参数是否“不是数值”，传入参数后，会对参数进行类型转换，任何不能被转换成数值的参数都将使这个函数返回ture。</p><p>3个函数可以将非数值转化为数值，Number()，parseInt()，parseFloat()。第一个可以转化任何类型，后两个主要用于转化字符串。由于Number()在转化字符串时过于复杂且不够合理，在处理整数时一般使用parseInt()。</p><p>parseInt()在转换字符串时，会忽略字符串前面的空格，直到找到第一个非空格字符，如果第一个字符不是数字字符或者负号，则返回NaN，如果第一个字符是数字字符，则继续解析，直到解析完所有字符或者遇到了一个非数字字符（小数点之后的不会被解析，因为小数点也是非数字字符）。parseInt()还支持第二个参数，表示转换时的进制单位。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;AF&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN  默认按10进制转化，&quot;AF&quot;是非数字字符</span>\n<span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;AF&quot;</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 175 按16进制转化</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>parseFloat()转化与parseInt()类似，区别在于解析到遇见一个无效的浮点数字字符为止，即只有第一个小数点会被解析。</p><h3 id="string类型" tabindex="-1"><a class="header-anchor" href="#string类型" aria-hidden="true">#</a> String类型</h3><p>ECMAScript中双引号和单引号表示的字符串完全相同，但左右引号必须匹配。</p><p>String类型包含一些特殊的字符字面量，用\\开头表示，例如：\\n，\\r</p><p>字符串的长度可以使用length属性取得</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> text <span class="token operator">=</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>text<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>数值，布尔值，对象和字符串值都有toString()方法，此方法返回相应值的字符串表现。null和undefined没有此方法。默认情况下以十进制格式返回数值的字符串表示，传入进制参数可以按照其他进制单位返回。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;10&quot;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;1010&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>无法确定值是不是null和undefined时可以使用转型函数String()，传入参数如果有toString()方法，则返回toString()方法的值，如果为null则返回&quot;null&quot;，如果为undefined则返回&quot;undefined&quot;。</p><h3 id="object类型" tabindex="-1"><a class="header-anchor" href="#object类型" aria-hidden="true">#</a> Object类型</h3><p>ECMAScript中对象是一组数据和功能的集合。Object类型是所有它的实例的基础，Object类型所具有的任何属性和方法也同样存在于更具体的对象中。<br> Object类型的每个实例都有下列属性和方法：<br> constructor：保存用于创建当前对象的函数。<br> hasOwnProperty()：用于检查给定属性在当前对象实例上是否存在，而不是存在于原型中。传入参数为属性名的字符串。<br> isPrototypeOf()：用于检查传入的参数对象是否存在于调用该方法对象的原型链上。<br> propertyIsEnumerable()：用于检查传入的参数属性是否能够使用for-in枚举。<br> toLocaleString()：返回对象的字符串表示，与执行环境的地区对应。<br> toString()：返回对象字符串表示。<br> valueOf()：返回对象的字符串、数值或布尔值表示，通常与toString方法返回值相同。</p><h2 id="函数" tabindex="-1"><a class="header-anchor" href="#函数" aria-hidden="true">#</a> 函数</h2><p>函数不必指定返回值，任何函数任何时候都可以通过ruturn语句后跟要返回的值来实现返回值，执行完return语句之后函数会停止并立即退出，即return之后的语句不会被执行。不带任何值的return语句将返回undefined。</p><p>函数参数在内部使用一个类似数组来表示，通过arguments对象来访问这个参数数组。arguments对象的长度由传入时的参数个数决定，不是由定义函数时的参数个数决定。没有传递值的命名参数将自动被赋予undefined值，通过检查传入函数中参数的类型和数量并作出不同反应，可以模仿方法的重载。</p>',37),t={render:function(n,a){return e}}}}]);