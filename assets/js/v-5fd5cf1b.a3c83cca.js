(self.webpackChunknote=self.webpackChunknote||[]).push([[2232],{4431:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>t});const t={key:"v-5fd5cf1b",path:"/css-secret/35.html",title:"第三十五章、缓动效果",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[],filePathRelative:"css-secret/35.md"}},3502:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>p});const t=(0,a(6252).uE)('<h1 id="第三十五章、缓动效果" tabindex="-1"><a class="header-anchor" href="#第三十五章、缓动效果" aria-hidden="true">#</a> 第三十五章、缓动效果</h1><p>动画中的三次贝塞尔曲线可以定义动画的进度，设置相应的值可以使动画突破动画本身的范围</p><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code><span class="token selector">&lt;input type=&quot;text&quot;&gt;\n&lt;div class=&quot;tip&quot;&gt;提示文字&lt;/div&gt;\n\n.tip</span><span class="token punctuation">{</span>\n    <span class="token property">transform-origin</span><span class="token punctuation">:</span> 1.4em -.4em<span class="token punctuation">;</span> // 让元素在左上角位置缩放\n    <span class="token property">transition</span><span class="token punctuation">:</span> .5s <span class="token function">cubic-bezier</span><span class="token punctuation">(</span>.25<span class="token punctuation">,</span>.1<span class="token punctuation">,</span>.3<span class="token punctuation">,</span>1.5<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector">input:not(:focus) + .tip</span><span class="token punctuation">{</span>  // 当输入框没有聚焦时隐藏提示文字\n    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><div align="center"><img src="/note/images/css-secret/35/1.gif"></div><p>可以看到元素的缩放动画，会使元素超过本身的大小，形成一种回弹的效果，但是在缩放为0的时候，会出现元素再次出现的小BUG，在文本框失去焦点的时候给元素重新定义动画的时间函数可以解决这个问题</p><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code><span class="token selector">input:not(:focus) + .tip</span><span class="token punctuation">{</span>\n    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token property">transition</span><span class="token punctuation">:</span> .2s ease<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div align="center"><img src="/note/images/css-secret/35/2.gif"></div>',7),p={render:function(n,s){return t}}}}]);