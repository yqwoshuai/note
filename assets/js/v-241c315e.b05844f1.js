(self.webpackChunknote=self.webpackChunknote||[]).push([[5394],{9413:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>t});const t={key:"v-241c315e",path:"/css-secret/21.html",title:"第二十一章、插入换行",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[],filePathRelative:"css-secret/21.md"}},9977:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>p});const t=(0,a(6252).uE)('<h1 id="第二十一章、插入换行" tabindex="-1"><a class="header-anchor" href="#第二十一章、插入换行" aria-hidden="true">#</a> 第二十一章、插入换行</h1><p>实现定义列表，即名值对型的列表时，通常用到以下结构。</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dl</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">&gt;</span></span>Name:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">&gt;</span></span>YQ<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">&gt;</span></span>E-mail:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">&gt;</span></span>YQ@xx.com<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">&gt;</span></span>Tel:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">&gt;</span></span>13000000000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dl</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>通常需要的效果是每个名值对占一行。首先需要将dt，dd转为行级元素，但这样会让所有元素在一行，所以需要在dd之后插入换行元素。并且让换行符不与HTML结构中的其他空白符合并。</p><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code><span class="token selector">dt,dd</span><span class="token punctuation">{</span>\n    <span class="token property">display</span><span class="token punctuation">:</span> inline<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector">dd:after</span><span class="token punctuation">{</span>\n    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">&quot;\\A&quot;</span><span class="token punctuation">;</span>  // 插入空白符\n    <span class="token property">white-space</span><span class="token punctuation">:</span> pre<span class="token punctuation">;</span>  // 保留空白符不合并\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div align="center"><img src="/note/images/css-secret/21/1.png"></div><p>当需要插入多个dd元素时，为保证dd之间都在同一行不换行，更改CSS选择器，选择位于dd之后的dt元素之前插入换行符。</p><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code><span class="token selector">// 位于dd元素之后的dt元素，也就是列表的下一项之前插入换行符。\ndd + dt:before</span><span class="token punctuation">{</span>  \n    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">&quot;\\A&quot;</span><span class="token punctuation">;</span>\n    <span class="token property">white-space</span><span class="token punctuation">:</span> pre<span class="token punctuation">;</span>\n<span class="token punctuation">}</span> \n<span class="token selector">// 位于dd元素之后的dd元素之前插入逗号，方便分开两项。\ndd + dd:before</span><span class="token punctuation">{</span>  \n    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">&quot;,&quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><div align="center"><img src="/note/images/css-secret/21/2.png"></div>',9),p={render:function(n,s){return t}}}}]);