(self.webpackChunknote=self.webpackChunknote||[]).push([[8481],{2618:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>e});const e={key:"v-74473916",path:"/git/",title:"git基本操作",lang:"zh-CN",frontmatter:{sidebar:"auto"},excerpt:"",headers:[{level:2,title:"创建版本库",slug:"创建版本库",children:[]},{level:2,title:"版本信息",slug:"版本信息",children:[]},{level:2,title:"远程仓库",slug:"远程仓库",children:[]},{level:2,title:"分支管理",slug:"分支管理",children:[]},{level:2,title:"标签管理",slug:"标签管理",children:[]},{level:2,title:"自定义git",slug:"自定义git",children:[]}],filePathRelative:"git/README.md"}},5436:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>p});const e=(0,a(6252).uE)('<h1 id="git基本操作" tabindex="-1"><a class="header-anchor" href="#git基本操作" aria-hidden="true">#</a> git基本操作</h1><h2 id="创建版本库" tabindex="-1"><a class="header-anchor" href="#创建版本库" aria-hidden="true">#</a> 创建版本库</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>// 初始化\n<span class="token function">git</span> init\n\n// 添加文件到暂存区\n<span class="token function">git</span> <span class="token function">add</span> <span class="token operator">&lt;</span>文件名<span class="token operator">&gt;</span>\n// 添加所有变动过的文件\n<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span> \n// 提交已添加的修改到本地仓库\n<span class="token function">git</span> commit -m <span class="token string">&quot;本次提交的注释信息&quot;</span>\n\n// 查看当前仓库状态\n<span class="token function">git</span> status\n// 查看文件的修改内容（工作区和暂存区）\n<span class="token function">git</span> <span class="token function">diff</span> 文件名\n// 查看文件的修改内容（暂存区和当前版本库）\n<span class="token function">git</span> <span class="token function">diff</span> 文件名 --cached\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h2 id="版本信息" tabindex="-1"><a class="header-anchor" href="#版本信息" aria-hidden="true">#</a> 版本信息</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>// 查看提交历史记录，q退出查看\n<span class="token function">git</span> log\n// 历史记录单行显示，前面的一串数字为每次commit的id，版本号\n<span class="token function">git</span> log --pretty<span class="token operator">=</span>oneline\n\n// 退回上一个版本，上上次版本为HEAD^^，前100个版本为HEAD~100\n<span class="token function">git</span> reset --hard HEAD^\n// 退回指定版本\n<span class="token function">git</span> reset --hard commit的id前几位，一般5位左右就找得到\n\n// 查看记录的每一次指令操作\n<span class="token function">git</span> reflog\n\n// 丢弃工作区的修改，本质是用版本库的版本替换工作区的版本，所以被删的文件会被恢复，同理新建的文件会被删除\n<span class="token function">git</span> checkout -- 文件名\n// 丢弃暂存区的修改，重新放回工作区\n<span class="token function">git</span> reset HEAD 文件名\n// 已经提交到版本库的话用版本退回\n\n// 删除版本库中的文件\n<span class="token function">git</span> <span class="token function">rm</span> 文件名\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h2 id="远程仓库" tabindex="-1"><a class="header-anchor" href="#远程仓库" aria-hidden="true">#</a> 远程仓库</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>// 新建公钥，用户主目录里找到.ssh目录，下面有id_rsa和id_rsa.pub两个文件。\n// id_rsa是私钥，id_rsa.pub是公钥，将id_rsa.pub里的内容添加到github的SSH Keys中\nssh-keygen -t rsa -C <span class="token string">&quot;邮箱地址&quot;</span>\n\n// 关联远程仓库\n<span class="token function">git</span> remote <span class="token function">add</span> origin git地址\n// 提交代码到指定分支，master为新建仓库默认分支\n// 第一次添加要增加 -u 参数关联远程的master和本地的master分支\n<span class="token function">git</span> push -u origin master\n\n// 克隆远程仓库\n<span class="token function">git</span> clone git地址\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="分支管理" tabindex="-1"><a class="header-anchor" href="#分支管理" aria-hidden="true">#</a> 分支管理</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>// 创建新分支并切换到新分支\n<span class="token function">git</span> checkout -b 新分支名称\n// 本职是执行下面两条命令\n// 创建新分支\n<span class="token function">git</span> branch 分支名称\n// 切换分支\n<span class="token function">git</span> checkout 分支名称\n\n// 查看当前已有分支\n<span class="token function">git</span> branch\n\n// 将指定分支的代码合并到当前分支\n<span class="token function">git</span> merge 指定分支名称\n// 删除分支\n<span class="token function">git</span> branch -d 分支名称\n// 删除还未被合并的分支\n<span class="token function">git</span> branch -D 分支名称\n\n// 合并内容的时候可能会有冲突，需要手动修改，Git用<span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;</span>，<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>，<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>标记出不同分支的内容\n// 合并时git默认使用Fast forward模式，不会生成commit，使用 --no-ff 参数禁用Fast forward模式。同时要使用 -m 添加commit的内容\n<span class="token function">git</span> merge --no-ff -m <span class="token string">&quot;本次提交的注释信息&quot;</span> 分支名称\n\n// 暂存修改\n<span class="token function">git</span> stash\n// 查看暂存的修改\n<span class="token function">git</span> stash list\n// 恢复暂存的修改（不删除暂存的内容）\n<span class="token function">git</span> stash apply\n// 删除暂存的内容\n<span class="token function">git</span> stash drop\n// 恢复暂存的修改（删除暂存的内容）\n<span class="token function">git</span> stash pop\n// 恢复指定的暂存\n<span class="token function">git</span> stash apply stash@<span class="token punctuation">{</span>暂存的序号<span class="token punctuation">}</span>\n\n// 查看远程库信息，远程仓库默认名称为origin\n<span class="token function">git</span> remote\n// 查看远程库详细信息\n<span class="token function">git</span> remote -v\n// 创建远程仓库的指定分支到本地\n<span class="token function">git</span> checkout -b 分支名称 origin/分支名称\n// 关联本地指定分支与远程仓库指定分支\n<span class="token function">git</span> branch --set-upstream-to 分支名称 origin/分支名称\n\n// 整理分支为一条直线\n// 优点是看上去更直观，查看历史提交的变化时更容易。缺点是本地的分叉提交已经被修改过了\n<span class="token function">git</span> rebase\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br></div></div><h2 id="标签管理" tabindex="-1"><a class="header-anchor" href="#标签管理" aria-hidden="true">#</a> 标签管理</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>// 创建新标签\n<span class="token function">git</span> tag 标签名\n// 查看所有标签\n<span class="token function">git</span> tag\n// 给指定的commit打标签\n<span class="token function">git</span> tag 标签名 commit的id前几位\n// 查看标签信息\n<span class="token function">git</span> show 标签名\n// 创建带说明的标签\n<span class="token function">git</span> tag -a 标签名 -m <span class="token string">&quot;本次提交的注释信息&quot;</span> commit的id前几位\n\n// 删除标签\n<span class="token function">git</span> tag -d 标签名\n// 推送标签\n<span class="token function">git</span> push origin 标签名\n// 删除远程标签（先删除本地标签）\n<span class="token function">git</span> push origin :refs/tags/标签名\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h2 id="自定义git" tabindex="-1"><a class="header-anchor" href="#自定义git" aria-hidden="true">#</a> 自定义git</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>// git显示不同的颜色\n<span class="token function">git</span> config --global color.ui <span class="token boolean">true</span>\n\n// 检查git忽略规则\n<span class="token function">git</span> check-ignore -v 文件名\n\n// 无视git忽略规则强制提交\n<span class="token function">git</span> <span class="token function">add</span> -f 文件名\n\n// 配置别名\n// 仓库的Git配置文件都放在.git/config\n// 当前用户的Git配置文件放在用户主目录下的一个隐藏文件.gitconfig\n// 例如将checkout命令配置为co。以后git co 就相当于 <span class="token function">git</span> checkout\n<span class="token function">git</span> config --global alias.co checkout\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div>',13),p={render:function(n,s){return e}}}}]);