(self.webpackChunknote=self.webpackChunknote||[]).push([[7736],{8053:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>p});const p={key:"v-d1c3ead0",path:"/js-njia/1.html",title:"第一章、函数是根基",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"函数的声明",slug:"函数的声明",children:[]},{level:2,title:"作用域和函数",slug:"作用域和函数",children:[]},{level:2,title:"函数调用",slug:"函数调用",children:[{level:3,title:"函数 “作为函数” 调用",slug:"函数-作为函数-调用",children:[]},{level:3,title:"函数 “作为方法” 调用",slug:"函数-作为方法-调用",children:[]},{level:3,title:"函数作为构造器调用",slug:"函数作为构造器调用",children:[]},{level:3,title:"使用apply()和call()方法进行调用",slug:"使用apply-和call-方法进行调用",children:[]}]}],filePathRelative:"js-njia/1.md"}},7005:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>t});const p=(0,a(6252).uE)('<h1 id="第一章、函数是根基" tabindex="-1"><a class="header-anchor" href="#第一章、函数是根基" aria-hidden="true">#</a> 第一章、函数是根基</h1><h2 id="函数的声明" tabindex="-1"><a class="header-anchor" href="#函数的声明" aria-hidden="true">#</a> 函数的声明</h2><ol><li>function关键字</li><li>可选名称（有效的Javascript标识符）</li><li>括号内部，一个以逗号分隔的参数列表（有效的Javascript标识符，列表可以为空）</li><li>函数体，包含在大括号内的一系列Javascript语句（函数体可以为空）</li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//在全局作用域下定义一个函数</span>\n<span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> window<span class="token punctuation">.</span>a<span class="token operator">===</span><span class="token string">&quot;function&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ture  window对象上的同名属性会引用这个函数</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>name<span class="token operator">===</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true  所有函数都有一个name属性，保存该函数名称的字符串</span>\n\n<span class="token comment">//创建一个匿名函数并赋值给变量b</span>\n<span class="token keyword">var</span> <span class="token function-variable function">b</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> window<span class="token punctuation">.</span>b<span class="token operator">===</span><span class="token string">&quot;function&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ture </span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>name<span class="token operator">===</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true  在旧浏览器下这样定义的函数的name属性为空或者undefined</span>\n\n<span class="token comment">//创建一个匿名函数并引用到window对象的一个属性</span>\nwindow<span class="token punctuation">.</span><span class="token function-variable function">c</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> window<span class="token punctuation">.</span>c<span class="token operator">===</span><span class="token string">&quot;function&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>name<span class="token operator">===</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true  在旧浏览器下这样定义的函数的name属性为undefined</span>\n\n<span class="token comment">//在全局作用域下创建outer函数，并在内部创建inner函数</span>\n<span class="token keyword">function</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> inner<span class="token operator">===</span><span class="token string">&quot;function&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true  在inner创建之前可以访问到inner</span>\n   <span class="token keyword">function</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> inner<span class="token operator">===</span><span class="token string">&quot;function&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true  在inner创建之后可以访问到inner</span>\n   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> window<span class="token punctuation">.</span>inner<span class="token operator">===</span><span class="token string">&quot;undefined&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true  inner没有被绑定到全局对象上去</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">//创建一个函数并引用到window对象的一个属性</span>\nwindow<span class="token punctuation">.</span><span class="token function-variable function">e</span><span class="token operator">=</span><span class="token keyword">function</span> <span class="token function">d</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>name<span class="token operator">===</span><span class="token string">&quot;d&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true  这样创建的函数只能使用e来调用，但它的name属性是函数本身的字面量名称</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h2 id="作用域和函数" tabindex="-1"><a class="header-anchor" href="#作用域和函数" aria-hidden="true">#</a> 作用域和函数</h2><p>函数可以在其作用域范围内提前被引用，但变量不行。</p><h2 id="函数调用" tabindex="-1"><a class="header-anchor" href="#函数调用" aria-hidden="true">#</a> 函数调用</h2><ol><li>作为函数进行调用</li><li>作为一个对象在对象上进行调用</li><li>作为构造器进行调用，创建一个新对象</li><li>通过apply()或call()方法进行调用</li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//定义一个包含参数的函数</span>\n<span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 当参数数量少于定义的形参执行函数时，1会被赋值给a，而b、c会被赋值为undefined</span>\n<span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 当参数数量多于定义的形参执行函数时，1,2,3会被分别赋值给a,b,c，而4,5不会赋值给任何形参</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>所有函数调用都会传递两个隐式参数：arguments和this。 arguments参数是传递给函数的所有参数的一个集合，具有length属性，可以使用for对其进行遍历，但不是真正的Javascript数组，无法使用数组的方法，是一个类似数组的结构，只拥有数组的某些特性。 this参数引用了与该函数调用进行隐式关联的一个对象，称之为：函数上下文。this的指向依赖于函数的调用方式，即便调用的函数相同，调用的方式不一样，this的指向也会不一样。</p><h3 id="函数-作为函数-调用" tabindex="-1"><a class="header-anchor" href="#函数-作为函数-调用" aria-hidden="true">#</a> 函数 “作为函数” 调用</h3><p>当一个函数以 “作为函数” 的方式进行调用时，表示应用了()操作符的表达式，并且没有将函数作为对象的一个属性。例如：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">this</span>  <span class="token punctuation">}</span>\n<span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">===</span>window<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  true</span>\n\n<span class="token keyword">var</span> <span class="token function-variable function">b</span><span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">this</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">===</span>window<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  true</span>\n<span class="token comment">//以这种方式调用时，函数的上下文是全局上下文window对象，及this的指向为window对象</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="函数-作为方法-调用" tabindex="-1"><a class="header-anchor" href="#函数-作为方法-调用" aria-hidden="true">#</a> 函数 “作为方法” 调用</h3><p>当一个函数以 “作为方法” 的方式进行调用时，表示函数被赋值给一个对象的属性，并使用引用该函数的属性进行调用，例如：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\na<span class="token punctuation">.</span><span class="token function-variable function">b</span><span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\na<span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  以这种方式调用时，函数的上下文是当前对象</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">===</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ture</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>其实函数 “作为函数” 的调用方式是 “作为方法” 调用方式的一种特殊情况。 “作为函数” 的调用时，函数其实是绑定在window对象上的，window对象就是当前函数的上下文。省略了window对象调用的方式，直接使用函数字面量进行调用。</p><p>面向对象变成的基本概念之一，就是我们可以在任意方法中，通过this的指向来引用该方法所属的对象。</p><h3 id="函数作为构造器调用" tabindex="-1"><a class="header-anchor" href="#函数作为构造器调用" aria-hidden="true">#</a> 函数作为构造器调用</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token constant">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">b</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>\n<span class="token keyword">var</span> c<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 在函数调用前使用new关键字表示函数作为构造器进行调用</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">===</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true  构造函数创建的实例中this指向当前对象。</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>作为构造器调用时，会发生以下行为：</p><ol><li>创建一个新的空对象。</li><li>将新对象的this参数传递给构造器函数，从而新对象的函数上下文成为构造器的函数上下文。</li><li>如果没有显示的返回值，则新对象作为构造器的返回值进行返回（任何干扰这种意图的都不适合作为构造器）。</li></ol><p>一般的函数和方法以小写字母开头，构造器函数以大写字母开头。</p><h3 id="使用apply-和call-方法进行调用" tabindex="-1"><a class="header-anchor" href="#使用apply-和call-方法进行调用" aria-hidden="true">#</a> 使用apply()和call()方法进行调用</h3><p>Javascript中函数也可以像对象一样拥有方法和属性，每个函数都有apply()和call()方法。 通过apply()调用函数，需要传入两个参数，一个是作为函数上下文的对象，另一个是函数参数所组成的数组。call()方法与之类似，唯一不同的是call()方法给函数传入的是参数列表，而不是将所有参数作为一个数组传入。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">x</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token operator">=</span>a<span class="token operator">+</span>b<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> a<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> b<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token function">x</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">x</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3  此时x函数中的this被绑定为a对象</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3  此时x函数中的this被绑定为b对象</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>Javascript是函数式编程语言，函数式程序的构件块而不是命令式语句。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//一般的命令式编程</span>\n<span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">list</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>list<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n      <span class="token comment">/* 每一项需要执行的代码 */</span>\n   <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">//函数式编程</span>\n<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>list<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n   <span class="token function">fun</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div>',28),t={render:function(n,s){return p}}}}]);