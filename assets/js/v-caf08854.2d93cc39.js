(self.webpackChunknote=self.webpackChunknote||[]).push([[4816],{3108:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>p});const p={key:"v-caf08854",path:"/js-njia/3.html",title:"第三章、闭包",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"闭包是如何工作的",slug:"闭包是如何工作的",children:[]},{level:2,title:"使用闭包",slug:"使用闭包",children:[{level:3,title:"即时函数",slug:"即时函数",children:[]}]}],filePathRelative:"js-njia/3.md"}},8232:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>t});const p=(0,a(6252).uE)('<h1 id="第三章、闭包" tabindex="-1"><a class="header-anchor" href="#第三章、闭包" aria-hidden="true">#</a> 第三章、闭包</h1><h2 id="闭包是如何工作的" tabindex="-1"><a class="header-anchor" href="#闭包是如何工作的" aria-hidden="true">#</a> 闭包是如何工作的</h2><p>闭包是一个函数在创建时允许（自身函数）访问并操作（该自身函数之外的变量）时所创建的作用域。 最简单的闭包：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 在全局作用域下定义a变量和b函数，b函数（自身函数）能够访问到a变量（该自身函数之外的变量）</span>\n<span class="token comment">// a变量和b函数都是在全局作用域下定义的，此时全局作用域就是一个闭包</span>\n<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 在全局作用域下定义一个空变量a，再定义b函数</span>\n<span class="token comment">// 在b函数中，定义变量i和c函数，并将c函数引用到a变量中。</span>\n<span class="token keyword">var</span> a<span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token keyword">function</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    a <span class="token operator">=</span> c<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 执行b函数，执行结束后b函数的作用域消失</span>\n<span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 再执行a函数，上面有对b函数内部的c函数的引用</span>\n<span class="token comment">// 最终能够输出变量i，</span>\n<span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>在第二个例子中，外部函数b声明内部函数c的时候，不仅是声明了函数，还创建了一个闭包，这个闭包不仅包含函数声明，还包含了声明那一时刻点上该作用域中所有的变量，通过这个闭包，c函数就能够访问到外部的i变量。</p><h2 id="使用闭包" tabindex="-1"><a class="header-anchor" href="#使用闭包" aria-hidden="true">#</a> 使用闭包</h2><p>私有变量</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 定义一个构造函数A，在内部定义一个私有变量b，并定义两个能够访问变量b的方法</span>\n<span class="token keyword">function</span> <span class="token constant">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">get</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t    <span class="token keyword">return</span> b<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">choose</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t    b<span class="token operator">++</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 实例化A，内部参数只能通过两个给定的方法进行访问，无法直接访问b变量，这样b变量就变成了一个私有变量，无法随意修改</span>\n<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\na<span class="token punctuation">.</span><span class="token function">choose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 1</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>回调函数与计时器</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 使用jquery的click函数为元素绑定点击事件时，在回调函数中，success函数能够访问到在其外部定义的$el节点，这就是一个闭包，在setTimeout定时器的回调函数中同理。</span>\n<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;#testbutton&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">var</span> $el <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;#text&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    $el<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string">&quot;lodding....&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        url<span class="token operator">:</span><span class="token string">&quot;test.json&quot;</span><span class="token punctuation">,</span>\n        <span class="token function-variable function">success</span><span class="token operator">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">dataType</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">var</span> a<span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>\n            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> dataType<span class="token punctuation">)</span><span class="token punctuation">{</span>\n                <span class="token keyword">var</span> html <span class="token operator">=</span> i<span class="token operator">+</span><span class="token string">&quot; &quot;</span><span class="token operator">+</span>dataType<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">&quot;&lt;br&gt;&quot;</span><span class="token punctuation">;</span>\n                a<span class="token operator">+=</span>html<span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            $el<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h4 id="绑定函数上下文" tabindex="-1"><a class="header-anchor" href="#绑定函数上下文" aria-hidden="true">#</a> 绑定函数上下文</h4><p>浏览器的事件处理系统中，this的指向会被默认绑定为事件的目标元素，所以在事件回调函数中，使用this要注意这一点。使用bind()方法可以改变this的指向。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;button type=&quot;button&quot; id=&quot;button&quot;&gt;点击&lt;/button&gt;\n&lt;div id=&quot;a&quot;&gt;内容A&lt;/div&gt;\n\nvar fun=function () {\n\tconsole.log(this);\n};\nvar a = document.querySelector(&#39;#a&#39;);\nvar btn = document.querySelector(&#39;#button&#39;);\n// 为按钮绑定点击事件，会打印出按钮本身，但bind()函数中传入了a节点，将fun方法中的this指向了a。\nbtn.addEventListener(&quot;click&quot;,fun.bind(a),false); // 打印出a节点\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="即时函数" tabindex="-1"><a class="header-anchor" href="#即时函数" aria-hidden="true">#</a> 即时函数</h3><p>即时函数的基本结构：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token comment">/*函数主题*/</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>通过参数限制作用域内的名称：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 在最后执行时将jQuery作为参数传入，在函数开头用$符号接收，在函数内部就可以随意使用$表示jQuery，不受外部干扰，即使外部已经使用过$来表示其他的东西。</span>\n<span class="token keyword">var</span> <span class="token function-variable function">$</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">$</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;#a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>jQuery<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>即时函数可以解决利用循环和闭包时产生的问题。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 点击每一个div都会弹出divs的长度，因为闭包记住的是变量的引用，而不是闭包创建时刻该变量的值。最终i的值都是divs的长度。</span>\n<span class="token keyword">var</span> divs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>divs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    divs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">alert</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 在for循环内加入即时函数，将每次循环后正确的值传入即时函数，事件处理函数就可以得到正确的值</span>\n<span class="token keyword">var</span> divs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>divs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        divs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">alert</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div>',20),t={render:function(n,s){return p}}}}]);