(self.webpackChunknote=self.webpackChunknote||[]).push([[8179],{8499:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>t});const t={key:"v-3625a69d",path:"/js-develop/10.html",title:"第十章、DOM",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"节点层次",slug:"节点层次",children:[{level:3,title:"Node类型",slug:"node类型",children:[]},{level:3,title:"Doucment类型",slug:"doucment类型",children:[]},{level:3,title:"Element类型",slug:"element类型",children:[]}]},{level:2,title:"DOM操作技术",slug:"dom操作技术",children:[{level:3,title:"动态脚本",slug:"动态脚本",children:[]},{level:3,title:"动态样式",slug:"动态样式",children:[]},{level:3,title:"操作表格",slug:"操作表格",children:[]},{level:3,title:"使用NodeList",slug:"使用nodelist",children:[]}]}],filePathRelative:"js-develop/10.md"}},1124:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>p});const t=(0,a(6252).uE)('<h1 id="第十章、dom" tabindex="-1"><a class="header-anchor" href="#第十章、dom" aria-hidden="true">#</a> 第十章、DOM</h1><h2 id="节点层次" tabindex="-1"><a class="header-anchor" href="#节点层次" aria-hidden="true">#</a> 节点层次</h2><p>DOM可以将任何HTML和XML文档描绘成一个由多层节点构成的结构，文档节点只有一个子节点，即&lt;html&gt;元素，称之为文档元素，文档元素是最外层元素，文档中的其他所有元素都包含在文档元素中，每个文档只能有一个文档元素。</p><h3 id="node类型" tabindex="-1"><a class="header-anchor" href="#node类型" aria-hidden="true">#</a> Node类型</h3><p>所有节点类型都继承自Node类型，因此所有节点类型都共享相同的基本属性和方法。总共有12种节点类型，每个节点都有一个nodeType属性，用于表明节点类型，是一个常量。nodeName和nodeValue两个属性中保存着节点的信息。 每个节点都有一个childNodes属性。其中保存着一个NodeList对象，用于保存一组有序的节点，它实际上是基于DOM结构动态执行查询的结果，因此DOM结构变化能够自动反应在NodeList对象中。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 将NodeList对象转为数组</span>\n<span class="token keyword">function</span> <span class="token function">toArray</span><span class="token punctuation">(</span><span class="token parameter">nodes</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\t<span class="token keyword">try</span> <span class="token punctuation">{</span>\n\t    arr <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>nodes<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token comment">// IE8以前需要枚举所有成员</span>\n\t    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token operator">=</span>nodes<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t        arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t    <span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token keyword">return</span> arr<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>每个节点都有parentNode属性，指向文档树中的父节点。同一个childNodes列表中的所有节点都具有相同的父节点。因此它们的parentNode属性都指向同一个节点。包含在childNodes列表中的每个节点相互之间都是同胞节点，previousSibling表示前一节点，nextSibling表示后一节点。父节点的firstChild表示childNodes列表中的第一个节点，lastChild表示childNodes列表中的最后一个节点。也可以用方括号表示。即firstChild等于childNodes[0]，lastChild等于childNodes[childNodes.length-1]。</p><p>节点的hasChildNodes()方法在节点包含一个或多个子节点时返回true。所有节点都有ownerDocument属性，指向表示整个文档的文档节点。</p><p>appendChild()方法用于向childNodes列表末尾添加一个节点，并返回新添加的节点。如果传给该方法的节点已经是文档中的一部分，那结果就是将该节点从原来的位置转移到新位置。</p><p>insertBefore()方法用于将节点插入childNodes列表中特定的位置，这个方法接收两个参数，要插入的节点和作为参照的节点，插入后返回被插入的节点，参照节点为null时与appendChild()方法相同。</p><p>replaceChild()方法用于替换childNodes列表中的节点，这个方法接收两个参数，要插入的节点和要替换的节点，要替换的节点会从文档树中被移除，并被这个方法返回。</p><p>removeChild()方法用于移除childNodes列表中的节点，接收一个参数，即被移除的节点，被移除的节点将作为返回值返回。</p><p>cloneNode()方法用于创建调用和这个方法的节点的一个完全相同的副本，始终接收一个布尔值参数，表示是否执行深度复制，即复制节点及其整个子节点树，在参数为false时，只执行浅复制，即只复制节点本身。</p><h3 id="doucment类型" tabindex="-1"><a class="header-anchor" href="#doucment类型" aria-hidden="true">#</a> Doucment类型</h3><p>最常见的Doucment类型就是作为HTMLDocument实例的document对象。<br> document.documentElement属性指向&lt;html&gt;元素；<br> document.body属性指向&lt;body&gt;元素；<br> document.title属性包含&lt;title&gt;元素中的文本，可以通过这个取得当前页面的标题，也可以修改并反映在浏览器的标题中，但修改其值不会改变&lt;title&gt;元素；<br> document.URL属性保存页面完整的URL，即地址栏中显示的URL。<br> document.domain属性中包含当前页面的域名。<br> document.referrer属性中包含页面来源的URL。<br> 查找元素的方法：<br> document.getElementById()，按照元素ID进行查找；<br> document.getElementByTagName()，按照元素标签名进行查找，返回HTMLCollection对象；<br> document.getElementByName()，按照元素标name特性进行查找，返回HTMLCollection对象；<br> HTMLCollection对象有一个namedItem()方法，可以根据元素的name特性取得HTMLCollection对象中对应的对象。<br> 特殊合集：<br> document.anchors，包含文档中所有带有name特性的&lt;a&gt;元素；<br> document.forms，包含文档中所有&lt;form&gt;元素，与document.getElementByTagName(&quot;form&quot;)相同；<br> document.images，包含文档中所有&lt;img&gt;元素，与document.getElementByTagName(&quot;img&quot;)相同；<br> document.links，包含文档中所有带有href特性的&lt;a&gt;元素；<br> 特殊合集中的内容会随当前文档的更新而更新。</p><h3 id="element类型" tabindex="-1"><a class="header-anchor" href="#element类型" aria-hidden="true">#</a> Element类型</h3><p>Element节点即元素节点，提供了对元素标签名，子节点及特性的访问。<br> nodeType值为1；<br> noadeName值为元素标签名，与tagName值相同，输出的元素标签名为大写；</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token operator">&lt;</span>p id<span class="token operator">=</span><span class="token string">&quot;a&quot;</span><span class="token operator">&gt;</span>asd<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>nodeType<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 1</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>tagName<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// P</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>nodeName<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// P</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>所有HTML元素都由HTMLElement类型表示，每个HTML元素都具有以下标准特性，下列特性均可以修改。<br> id，元素在文档中的唯一标识符；<br> title，有关元素附加说明信息；<br> lang，元素内容语言代码；<br> dir，语言的方向；<br> className，元素的class特性。<br> 特性修改方法：<br> getAttribute()，接收一个字符串参数，为需要获取的特性名称，直接获取传入特性的值，也可以获取自定义特性的值，并且不区分大小写，只有公认的（非自定义）特性才会以属性的形式添加到DOM对象当中，获取style特性值得到的是CSS文本，通过属性访问style得到的是一个对象，获取onclick之类事件处理程序特性值返回的是相应代码的字符串，通过属性访问onclick之类事件处理程序得到的是一个JavaScript函数（未指定事件处理程序则返回null）。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token operator">&lt;</span>p id<span class="token operator">=</span><span class="token string">&quot;a&quot;</span> myID<span class="token operator">=</span><span class="token string">&quot;b&quot;</span><span class="token operator">&gt;</span>asd<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>\n\n<span class="token keyword">var</span> p <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// a</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>myID<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// undefined</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>setAttribute()，接收两个参数，一个为需要设置的特性名称，一个为需要设置的特性的值，如果需要设置的特性已经存在，则替换原有的特性值。<br> removeAttribute()，接收一个字符串参数，彻底删除元素的特性。<br> Element类型是使用attributes属性的唯一一个DOM节点类型。attributes属性中包含一个NamedNodeMap，与NodeList类型，是一个动态集合。每一个特性节点都保存在NamedNodeMap中，attributes属性仅在需要遍历元素特性的时候才用得到。每个特性节点都有一个specified属性，如果这个属性为true，则表示该特性要么是在HTML中指定的，要么是通过setAttribute()方法设置的。来自继承的特性和方法都为false。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token operator">&lt;</span>p id<span class="token operator">=</span><span class="token string">&quot;a&quot;</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;b&quot;</span> title<span class="token operator">=</span><span class="token string">&quot;c&quot;</span> data<span class="token operator">-</span>myID<span class="token operator">=</span><span class="token string">&quot;x&quot;</span><span class="token operator">&gt;</span>asd<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>\n\n<span class="token keyword">var</span> p <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>i<span class="token operator">&lt;</span>p<span class="token punctuation">.</span>attributes<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>attributes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>specified<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        obj<span class="token punctuation">[</span>p<span class="token punctuation">.</span>attributes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>nodeName<span class="token punctuation">]</span><span class="token operator">=</span>p<span class="token punctuation">.</span>attributes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>nodeValue<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// {id: &quot;a&quot;, class: &quot;b&quot;, title: &quot;c&quot;, data-myid: &quot;x&quot;}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>使用document.createElement()可以创建新元素，传入需要创建的新元素名称，创建后就可以对其进行各种DOM操作，包括设置各种特性。但最后需要appendChild()、insertBefore()、replaceChild()等方法将其添加到DOM当中。<br> 浏览器会将元素之间的空白符解释为文本节点，如果需要通过childNodes属性遍历子节点，则需要对节点类型进行判断后再执行操作。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>i<span class="token operator">&lt;</span>ele<span class="token punctuation">.</span>childNodes<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>ele<span class="token punctuation">.</span>childNodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>nodeType <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token comment">// 执行操作</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>每个元素应该只有一个文本子节点，使用normalize()方法可以将元素中的自文本节点合并成一个节点。</p><h2 id="dom操作技术" tabindex="-1"><a class="header-anchor" href="#dom操作技术" aria-hidden="true">#</a> DOM操作技术</h2><h3 id="动态脚本" tabindex="-1"><a class="header-anchor" href="#动态脚本" aria-hidden="true">#</a> 动态脚本</h3><p>在页面加载完成后动态加载外部javascript文件的通用方法。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">loadScript</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">var</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;script&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\tscript<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&quot;text/javascript&quot;</span><span class="token punctuation">;</span>\n\tscript<span class="token punctuation">.</span>src <span class="token operator">=</span> url<span class="token punctuation">;</span>\n\tdocument<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>在页面加载完成后动态加载外部javascript代码片段的通用方法。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">loadScriptCode</span><span class="token punctuation">(</span><span class="token parameter">code</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">var</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;script&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\tscript<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&quot;text/javascript&quot;</span><span class="token punctuation">;</span>\n    <span class="token comment">// IE不允许访问script元素的子节点，所以需要用script元素的text属性来添加代码片段。</span>\n\t<span class="token keyword">try</span><span class="token punctuation">{</span>\n\t    script<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t    script<span class="token punctuation">.</span>text <span class="token operator">=</span> code<span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\tdocument<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="动态样式" tabindex="-1"><a class="header-anchor" href="#动态样式" aria-hidden="true">#</a> 动态样式</h3><p>在页面加载完成后动态加载外部CSS文件的通用方法。注意CSS代码应该添加到head元素中，不是body元素中。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">loadStyle</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">var</span> link <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;link&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\tlink<span class="token punctuation">.</span>rel <span class="token operator">=</span> <span class="token string">&quot;stylesheet&quot;</span><span class="token punctuation">;</span>\n\tlink<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&quot;text/css&quot;</span><span class="token punctuation">;</span>\n\tlink<span class="token punctuation">.</span>href <span class="token operator">=</span> url<span class="token punctuation">;</span>\n\t<span class="token keyword">var</span> head <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&quot;head&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    head<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>link<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>在页面加载完成后动态加载外部CSS代码片段的通用方法。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">loadStyleCode</span><span class="token punctuation">(</span><span class="token parameter">code</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">var</span> style <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;style&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    style<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&quot;text/css&quot;</span><span class="token punctuation">;</span>\n    <span class="token comment">// IE不允许访问style元素的子节点，所以需要用style元素的styleSheet属性的cssText属性来添加代码片段。</span>\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n        style<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        style<span class="token punctuation">.</span>styleSheet<span class="token punctuation">.</span>cssText <span class="token operator">=</span> code<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\t<span class="token keyword">var</span> head <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&quot;head&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    head<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>style<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="操作表格" tabindex="-1"><a class="header-anchor" href="#操作表格" aria-hidden="true">#</a> 操作表格</h3><p>&lt;table&gt;元素具有以下属性和方法：<br> caption属性，保存着对&lt;caption&gt;元素的指针；<br> tBodies属性，&lt;tbody&gt;元素的HTMLCollection；<br> tFoot属性，保存着对&lt;tfoot&gt;元素的指针；<br> tHead属性，保存着对&lt;thead&gt;元素的指针；<br> rows属性，表格中所有行的HTMLCollection；<br> creatTHead()，创建&lt;thead&gt;元素，将其放到表格中，返回引用；<br> creatTFoot()，创建&lt;tfoot&gt;元素，将其放到表格中，返回引用；<br> creatCaption()，创建&lt;caption&gt;元素，将其放到表格中，返回引用；<br> deleteTHead()，删除&lt;thead&gt;元素；<br> deleteTFoot()，删除&lt;tfoot&gt;元素；<br> deleteCaption()，删除&lt;caption&gt;元素；<br> deleteRow()，删除指定参数的行；<br> insertRow()，向rows集合中指定位置插入行。<br> &lt;tbody&gt;元素具有以下属性和方法：<br> rows属性，&lt;tbody&gt;元素中所有行的HTMLCollection；<br> deleteRow()，删除指定参数的行；<br> insertRow()，向rows集合中指定位置插入行，返回对新插入行的引用。<br> &lt;tr&gt;元素具有以下属性和方法：<br> cells属性，&lt;tr&gt;元素中所有单元格的HTMLCollection；<br> deleteCells()，删除指定参数的行；<br> insertCells()，向cells集合中指定位置插入单元格，返回对新插入单元格的引用。</p><h3 id="使用nodelist" tabindex="-1"><a class="header-anchor" href="#使用nodelist" aria-hidden="true">#</a> 使用NodeList</h3><p>与NodeList类似的集合，NameNodeMap、HTMLCollection之类的，都是动态合集，文档结构发生变化时，它们也会得到更新。如果要迭代一个NodeList，最好使用length属性初始化第二个变量，以保证迭代的数量不会随着迭代而发生变化。应尽量减少对NodeList的访问，因为每次访问NodeList，都会运行一次基于文档的查询，所以应当将NodeList中取得的值缓存起来，方便多次使用。</p>',40),p={render:function(n,s){return t}}}}]);