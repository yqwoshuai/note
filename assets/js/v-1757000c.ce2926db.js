(self.webpackChunknote=self.webpackChunknote||[]).push([[9660],{1198:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>e});const e={key:"v-1757000c",path:"/css-secret/14.html",title:"第十四章、切脚效果",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[],filePathRelative:"css-secret/14.md"}},5909:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>p});const e=(0,a(6252).uE)('<h1 id="第十四章、切脚效果" tabindex="-1"><a class="header-anchor" href="#第十四章、切脚效果" aria-hidden="true">#</a> 第十四章、切脚效果</h1><p>让一个矩形在3D上进行X轴旋转，由于3D透视的关系，看上去就会变成一个梯形，所以可以利用之前平行四边形的解决方案来实现梯形，因为3D变形无法通过内部元素的反向变形来达到抵消的效果，所以不能使用嵌套元素解决方案，只能使用伪元素解决方案。</p><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code><span class="token selector">#a:after</span><span class="token punctuation">{</span>\n    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">perspective</span><span class="token punctuation">(</span>.5em<span class="token punctuation">)</span> <span class="token function">rotateX</span><span class="token punctuation">(</span>3deg<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div align="center"><img src="/note/images/css-secret/14/1.png"></div><p>由于没有设置transform-origin属性，应用变形的伪元素会以他自身的中心线为轴进行旋转，这样看上去，整个元素的宽度就增加了，并且位置会稍微下移，高度会有少量缩减。 将伪元素的轴线设置为底边可以解决前两个问题。</p><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code><span class="token property">transform-origin</span><span class="token punctuation">:</span> bottom<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div align="center"><img src="/note/images/css-secret/14/2.png"></div><p>为了弥补元素在高度上的缩减，可以对伪元素的高进行放大，具体放大的数值可以根据旋转的角度进行微调。</p><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code><span class="token property">transform</span><span class="token punctuation">:</span><span class="token function">scaleY</span><span class="token punctuation">(</span>1.4<span class="token punctuation">)</span> <span class="token function">perspective</span><span class="token punctuation">(</span>.5em<span class="token punctuation">)</span> <span class="token function">rotateX</span><span class="token punctuation">(</span>5deg<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div align="center"><img src="/note/images/css-secret/14/3.png"></div><p>这个技巧的最大优点在于CSS样式非常灵活，可以给伪元素添加背景，边框，圆角，投影等等属性。并且只要把transform-origin属性的值改为 bottom left或bottom right，就可以生成左边或右边的直角梯形（注意对左右内边距进行补正，让文字在视觉效果上保持居中）。</p><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code><span class="token selector">#a</span><span class="token punctuation">{</span>\n    <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span> // 保证增加内边距时盒子总大小不变\n    <span class="token property">padding-right</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector">#a:after</span><span class="token punctuation">{</span>\n    <span class="token property">transform</span><span class="token punctuation">:</span><span class="token function">scaleY</span><span class="token punctuation">(</span>1.4<span class="token punctuation">)</span> <span class="token function">perspective</span><span class="token punctuation">(</span>.5em<span class="token punctuation">)</span> <span class="token function">rotateX</span><span class="token punctuation">(</span>5deg<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token property">transform-origin</span><span class="token punctuation">:</span> bottom left<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><div align="center"><img src="/note/images/css-secret/14/4.png"></div><p>这一技巧可以很容易实现梯形样式的标签。</p><div align="center"><img src="/note/images/css-secret/14/5.png"></div>',15),p={render:function(n,s){return e}}}}]);