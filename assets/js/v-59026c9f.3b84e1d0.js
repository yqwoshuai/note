(self.webpackChunknote=self.webpackChunknote||[]).push([[3017],{4702:(s,n,a)=>{"use strict";a.r(n),a.d(n,{data:()=>e});const e={key:"v-59026c9f",path:"/css-secret/31.html",title:"第三十一章、根据兄弟元素数量来设置样式",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[],filePathRelative:"css-secret/31.md"}},2968:(s,n,a)=>{"use strict";a.r(n),a.d(n,{default:()=>l});const e=(0,a(6252).uE)('<h1 id="第三十一章、根据兄弟元素数量来设置样式" tabindex="-1"><a class="header-anchor" href="#第三十一章、根据兄弟元素数量来设置样式" aria-hidden="true">#</a> 第三十一章、根据兄弟元素数量来设置样式</h1><p>使用CSS的:nth-child一类的选择器（包括:nth-of-type）可以实现按元素数量来设置样式。下面的所有HTML结构都是每一行代表一个ul列表，每一个色块代表一个li元素。 对于只有一个元素时，使用:only-child。</p><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code><span class="token selector">// :only-child 表示：选择是唯一子元素的li元素\nli:only-child</span><span class="token punctuation">{</span>\n    <span class="token property">background</span><span class="token punctuation">:</span> #c80caa<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div align="center"><img src="/note/images/css-secret/31/1.png"></div><p>:only-child等效于 :first-child:last-child，一个元素既是第一个，也是最后一个，就表示只有他一个子元素。</p><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code><span class="token selector">// :only-child 表示：选择是唯一子元素的li元素\nli:first-child:last-child</span><span class="token punctuation">{</span>\n    <span class="token property">background</span><span class="token punctuation">:</span> #c80caa<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div align="center"><img src="/note/images/css-secret/31/2.png"></div><p>按照这个思路，如果一个元素，既是第一个，又是倒数第n个，就表示这个父元素中总共有n个子元素。</p><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code><span class="token selector">// 选择只有3个子元素的ul中的第一个li和只有5个子元素的ul中的第一个li\nli:first-child:nth-last-child(3),\nli:first-child:nth-last-child(5)</span><span class="token punctuation">{</span>\n    <span class="token property">background</span><span class="token punctuation">:</span> #c80caa<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div align="center"><img src="/note/images/css-secret/31/3.png"></div><p>组合兄弟选择器 ~ 使用可以选中所有的li。</p><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code><span class="token selector">// 选择只有3个子元素的ul中的第一个li和它之后的所有li，这样就选中了只有3个子元素的ul中的所有li元素\nli:first-child:nth-last-child(3),\nli:first-child:nth-last-child(3) ~ li</span><span class="token punctuation">{</span>\n    <span class="token property">background</span><span class="token punctuation">:</span> #c80caa<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div align="center"><img src="/note/images/css-secret/31/4.png"></div><p>:nth-child()这类选择器还可以传入n作为参数，来打到一种至少和至多的效果，n将从0开始取值，取所有正整数。</p><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code><span class="token selector">// 选择至少包含3个li元素的ul元素中的所有li元素\nli:first-child:nth-last-child(n+3),\nli:first-child:nth-last-child(n+3) ~ li</span><span class="token punctuation">{</span>\n    <span class="token property">background</span><span class="token punctuation">:</span> #c80caa<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div align="center"><img src="/note/images/css-secret/31/5.png"></div><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code><span class="token selector">// 将n设为负值，选择至多包含3个li元素的ul元素中的所有li元素\nli:first-child:nth-last-child(-n+3),\nli:first-child:nth-last-child(-n+3) ~ li</span><span class="token punctuation">{</span>\n    <span class="token property">background</span><span class="token punctuation">:</span> #c80caa<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div align="center"><img src="/note/images/css-secret/31/6.png"></div><p>将两种情况组合，可以打到按照固定数量范围选择元素。</p><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code><span class="token selector">// 选择子元素数量在3~5之间的ul中的所有li元素\nli:first-child:nth-last-child(n+3):nth-last-child(-n+5),\nli:first-child:nth-last-child(n+3):nth-last-child(-n+5) ~ li</span><span class="token punctuation">{</span>\n    <span class="token property">background</span><span class="token punctuation">:</span> #c80caa<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div align="center"><img src="/note/images/css-secret/31/7.png"></div>',21),l={render:function(s,n){return e}}}}]);